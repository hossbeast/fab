/* Copyright (c) 2012-2013 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
+[ $*/../../vars.fab ]

# source invocations
+[ $dcommon ]() @common

# variables
$libname 			= [ liblistwise.so ]
$copts				= [ -fPIC
	# include paths - mark as system to preclude dependency discovery from gcc
	[ $dlibxapi $dlibxlinux $dlibpstring $dlibxunit ~ s/^/-I ]

	[ $dliblistwise ~ ls c -d s/^/-I ]
]
$cflags_final	= [ $cflags_final $copts [ -DLWOPDIR=$lwopdir ~ j ] [ -DLWOPEXT=$lwopext ~ j ] ]
$cflags_debug	= [ $cflags_debug $copts [ -DLWOPDIR=$lwopdir ~ j ] [ -DLWOPEXT=$lwopext ~ j ] ]
$cflags_devel	= [ $cflags_devel $copts [ -DLWOPDIR=$lwopdir_devel ~ j ] [ -DLWOPEXT=$lwopext_devel ~ j ] ]

$lopts				= [ -lpcre -ldl -shared [ -Wl,--version-script=$*/exports ~ j ] ]
$lflags_final	= [ $lflags_final $lopts $libxapi_final $libxlinux_final $libpstring_final [ -Wl,-soname,liblistwise.so ~ j ] ]
$lflags_debug	= [ $lflags_debug $lopts $libxapi_debug $libxlinux_debug $libpstring_debug [ -Wl,-soname,liblistwise.debug.so ~ j ] ]
$lflags_devel	= [ $lflags_devel $lopts $libxapi_devel $libxlinux_devel $libpstring_devel [ -Wl,-soname,liblistwise.devel.so ~ j ] ]

# source files
+[@std.c]($dext = [ final.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise ~ ls m/op$ v ]; $cc; $cflags = [ $cflags_final ])
+[@std.c]($dext = [ debug.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise ~ ls m/op$ v ]; $cc; $cflags = [ $cflags_debug ])
+[@std.c]($dext = [ devel.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise ~ ls m/op$ v ]; $cc; $cflags = [ $cflags_devel ])

+[@std.l]($dext = [ final.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$lfabpaths; $cc $flex $flexflags;   $cflags = [ $cflags_final ])
+[@std.l]($dext = [ debug.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$lfabpaths; $cc $flex $flexflags;   $cflags = [ $cflags_debug ])
+[@std.l]($dext = [ devel.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$lfabpaths; $cc $flex $flexflags;   $cflags = [ $cflags_devel ])
+[@std.y]($dext = [ final.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$yfabpaths; $cc $bison $bisonflags; $cflags = [ $cflags_final ])
+[@std.y]($dext = [ debug.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$yfabpaths; $cc $bison $bisonflags; $cflags = [ $cflags_debug ])
+[@std.y]($dext = [ devel.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; -$yfabpaths; $cc $bison $bisonflags; $cflags = [ $cflags_devel ])

# generated files
+[@std.flex.states] ($dext = [ final.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_final ])
+[@std.flex.states] ($dext = [ debug.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_debug ])
+[@std.flex.states] ($dext = [ devel.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_devel ])
+[@std.bison.tokens]($dext = [ final.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_final ])
+[@std.bison.tokens]($dext = [ debug.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_debug ])
+[@std.bison.tokens]($dext = [ devel.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_devel ])
+[@std.xapi.errtab] ($dext = [ final.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_final ]; $fabpaths = [ $dliblistwise/error/PCRE.errtab ~ j ]; $apidata = [1])
+[@std.xapi.errtab] ($dext = [ debug.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_debug ]; $fabpaths = [ $dliblistwise/error/PCRE.errtab ~ j ]; $apidata = [1])
+[@std.xapi.errtab] ($dext = [ devel.pic.o ]; $gendir = $dliblistwise; $rdirs = $dliblistwise; $cc; $cflags = [ $cflags_devel ]; $fabpaths = [ $dliblistwise/error/PCRE.errtab ~ j ]; $apidata = [1])

# path to each operator so
+[@std.c]($dext = [ final.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise/op ~ j ]; $cc; $cflags = $cflags_final; -$cobjpaths)
[ $cobjpaths ] :^ [ $liblistwise_final ]
+[@std.c]($dext = [ debug.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise/op ~ j ]; $cc; $cflags = $cflags_debug; -$cobjpaths)
[ $cobjpaths ] :^ [ $liblistwise_debug ]
+[@std.c]($dext = [ devel.pic.o ]; $filter = [ ~ ?{ cons{?, l,/test.c v} ]; $rdirs = [ $dliblistwise/op ~ j ]; $cc; $cflags = $cflags_devel; -$cobjpaths)
[ $cobjpaths ] :^ [ $liblistwise_devel ]

$oplist_final = [ $dliblistwise ~ ??, s,$,/op lsr l,/test.c v sxf,c,final.so sy ]
$oplist_debug = [ $dliblistwise ~ ??, s,$,/op lsr l,/test.c v sxf,c,debug.so sy ]
$oplist_devel = [ $dliblistwise ~ ??, s,$,/op lsr l,/test.c v sxf,c,devel.so sy ]

# test sos
+[@std.xunit.tests](
	$rdirs = $dliblistwise;
	$cc;
	$dext = [ devel.pic.o ];
	$dscext = [ devel.pic.o ];
	$soext = [ devel.xu.so ];
	$cflags = [ $cflags_devel [ $dlibxunit ~ s/^/-I ] [ $dliblistwise ~ ls c -d s/^/-isystem ] ];
	-$tsopaths
)

$listwise_test = [ $*/listwise_test/listwise_test.devel.so ~ j ]

# run all tests
[ @test ] : [ $liblistwise_devel $oplist_devel $listwise_test $tsopaths ]
{
	[ $xunit_devel ] +XUNIT,INPUT,OUTPUT [ $liblistwise_devel $listwise_test $tsopaths ~ fi ] 1>&501 2>&502
}

# test helper
[ $listwise_test ] : [ [ $*/listwise_test/listwise_test.devel.pic.o ~ j ] $liblistwise_devel ]
{
	[ $cc ] [ $cflags_devel ~ uu fi ] -shared [ $@ ~ rx/aneedw lx/o uu fi ] -o [ $@ ]
}

##
## dependencies
##

# build library and all operators
[ @final ] : [ $liblistwise_final $oplist_final ]
[ @debug ] : [ $liblistwise_debug $oplist_debug ]
[ @devel ] : [ $liblistwise_devel $oplist_devel ]

##
## formulas
##

# library exports
[ $*/exports ~ j ] : [ $* ~ lsr lx/c ]
{
	  (echo "{ global: "
	> sed 's/.*API\(DATA\)\?[[:space:]]\+\([a-zA-Z][0-9a-zA-Z_]*\).*/\2;/p; d' <(\
	  cat -- [ $@ ~ rx/ineed fi ] )
	> echo "local: *; };"
	 ) 1>[ $@ ]
}

# link the library
[ $liblistwise_final ] : [ [ $*/exports ~ j ] [ $* ~ ls m/op$ o l/listwise_test v lsr sx/c/final.pic.o sy ] ]
{
	[ [ $cc ] [ $cflags_final ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o uu fi ] [ $lflags_final ~ fi ] ~ ?{ j{ } s{ }{\s\x5c\n}{g} ]
}

[ $liblistwise_debug ] : [ [ $*/exports ~ j ] [ $* ~ ls m/op$ o l/listwise_test v lsr sx/c/debug.pic.o sy ] ]
{
	[ [ $cc ] [ $cflags_debug ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o uu fi ] [ $lflags_debug ~ fi ] ~ ?{ j{ } s{ }{\s\x5c\n}{g} ]
}

[ $liblistwise_devel ] : [ [ $*/exports ~ j ] [ $* ~ ls m/op$ o l/listwise_test v lsr sx/c/devel.pic.o sy ] ]
{
	[ [ $cc ] [ $cflags_devel ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o uu fi ] [ $lflags_devel ~ fi ] ~ ?{ j{ } s{ }{\s\x5c\n}{g} ]
}

[ $liblistwise_final ] :^ [ $libxapi_final $libxlinux_final $libpstring_final ]
[ $liblistwise_debug ] :^ [ $libxapi_debug $libxlinux_debug $libpstring_debug ]
[ $liblistwise_devel ] :^ [ $libxapi_devel $libxlinux_devel $libpstring_devel ]

# link an operator so - which depends on its own .o
[ $oplist_final ~ dj shift ] :: [ $< ~ rx sxf/final.pic.o ]
{
	[ $cc ] [ $cflags_final ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o l/common o l/op uu fi ] [ $liblistwise_final ] -shared
}

[ $oplist_debug ~ dj shift ] :: [ $< ~ rx sxf/debug.pic.o ]
{
	[ $cc ] [ $cflags_debug ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o l/common o l/op uu fi ] [ $liblistwise_debug ] -shared
}

[ $oplist_devel ~ dj shift ] :: [ $< ~ rx sxf/devel.pic.o ]
{
	[ $cc ] [ $cflags_devel ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o l/common o l/op uu fi ] [ $liblistwise_devel ] -shared
}

# operators also depend on the library for linking
[ $oplist_final ] :^ [ $liblistwise_final ]
[ $oplist_debug ] :^ [ $liblistwise_debug ]
[ $oplist_devel ] :^ [ $liblistwise_devel ]

# PCRE errtab is generated from their header file
[ $dliblistwise/error/PCRE.errtab ~ j ] : [ /usr/include/pcre.h ~ j ]
{
	exec 1>[ $@ ]
	> sed -e 's/#define \(PCRE_ERROR_[A-Z_]\+\) \+(\([-0-9]\+\)).*/\2\t\1/p; d' <\
	/usr/include/pcre.h
}

##
## tasks
##

[ @install.final ] : [ @final ]
{
	install -d																				[ $destdir/$libdir ]
	install [ $liblistwise_final ]										[ $destdir/$libdir/$libname ]

	rm -rf																						[ $destdir/$lwopdir ] 2>/dev/null
	install -d																				[ $destdir/$lwopdir ]

	for x in [ $oplist_final ~ fi ]; do \
		install $x																			[ $destdir/$lwopdir ]
	done
}

[ @installdevheaders ] 
{
	install -d																				[ $destdir/$incdir ]
	install [ $dliblistwise/listwise.h	]							[ $destdir/$incdir/listwise.h ]

	install -d																				[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/fs.h ]						[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/generator.h ]		[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/internal.h ]			[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/iterate.h ]			[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/lwx.h ]					[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/object.h ]				[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/operator.h ]			[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/ops.h ]					[ $destdir/$incdir/listwise ]
	install [ $dliblistwise/listwise/re.h ]						[ $destdir/$incdir/listwise ]
}
