/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# errors.fab
#  provides fabrication formula for .errtab -> { .errtab.c, .errtab.h }
#  provides dependencies for { .errtab.c, .errtab.h } -> .errtab
#
# var/closure
#
#  apidata    - whether to include APIDATA in the errtab definition
#
#  dirs       - directories containing .errtab files
#  rdirs      - directories containing .errtab files, recursive search
#  paths      - paths to .errtab files
#
#  fabdirs    - (as above, but for fabrication/dependency only)
#  rfabdirs   - 
#  fabpaths   - 

# paths to errtab files for fabrication
$errtabpaths = [
  $paths        # paths
  $fabpaths     # paths, fabrication only

  [
    $dirs       # directories
    $fabdirs    # directories, fabrication only
  ~ ls ]

  [
    $rdirs      # recursive directories
    $rfabdirs   # recursive directories, fabrication only
  ~ lsr ]
~ lx/errtab ]

# errtab -> { .errtab.c, .errtab.h }
[ $errtabpaths ~ sx/errtab/errtab.c sy uu v d cp u sx/errtab.c/errtab.h z dj/2 shift pop ] :: [ $< ~ rx sx/errtab.c/errtab sx/errtab.h/errtab ss u ]
{
  hfl=[ $@ ~ lx/h ]
  hin=[ $@ ~ lx/h rx bn ]
  cfl=[ $@ ~ lx/c ]
  pfx=[ $@ ~ w/0/1 rx bn fn ]
  api=[ $apidata ~ s/1/APIDATA y ]

  > exec >${hfl}
  > echo "#ifndef _${pfx}_ERRTAB_H"
  > echo "#define _${pfx}_ERRTAB_H"
  > echo "#include \"xapi.h\""
  > echo "#define ETABLE_${pfx} \\"

  cat [ $@ ~ rx/ineed uu fi ] | \
  > sed -e 's/^\([-0-9]\+\)[\t ]\+\([^\t ]\+\)\([\t ]\+\(.*\)\)\?/_E(\1, \2, "\4") \\/p; d'

  > echo
  > echo "#if XAPI_STACKTRACE"

  cat [ $@ ~ rx/ineed uu fi ] | \
  > sed -e "s/^\([0-9]\+\)[\t ]\+\([^\t ]\+\)[\t ]\+\(.*\)/#define ${pfx}_\2 perrtab_${pfx}->v[\1 - ERRMIN_${pfx}].exit/p; d"

  > echo "#else"
  > echo "enum {"
  > echo "#define _E(a, b, c) ${pfx}_ ## b = a,"
  > echo "ETABLE_${pfx}"
  > echo "#undef _E"
  > echo "};"
  > echo "#endif"

  > echo -n "#define ERRMIN_${pfx} "
  cat [ $@ ~ rx/ineed uu fi ] | \
  > perl -e '$min=0xFFFF;while(<>){ if(/^([^\t ]+)/ && int($1)) { $min = [$min,$1]->[$min > $1] } } print $min, "\n"'

  > echo -n "#define ERRMAX_${pfx} "
  cat [ $@ ~ rx/ineed uu fi ] | \
  > perl -e '$max=-0xFFFF;while(<>){ if(/^([^\t ]+)/ && int($1)) { $max = [$max,$1]->[$max < $1] } } print $max, "\n"'

  > echo "extern errtab * perrtab_${pfx};"
  > echo "#endif"

  > exec >${cfl}
  > echo "#include \"${hin}\""
  > echo "#define APIDATA"
  > echo "errtab errtab_${pfx} = {"
  > echo "   .name = \"${pfx}\""
  > echo " , .min = ERRMIN_${pfx}"
  > echo " , .max = ERRMAX_${pfx}"
  > echo " , .v =  (typeof(((errtab*)0)->v[0])[]) {"
  > echo "#define _E(a, b, c) [ a - ERRMIN_${pfx} ] = { .name = #b, .desc = c, .str =\"${pfx}_\" #b \" : \" c, .exit = a },"
  > echo "ETABLE_${pfx}"
  > echo "#undef _E"
  > echo "}};"
  > echo "#if XAPI_STACKTRACE"
  > echo "errtab * ${api} perrtab_${pfx} = &errtab_${pfx};"
  > echo "#include \"xapi/errtab.h\""
  > echo "static void __attribute__((constructor)) init() {"
  > echo " xapi_errtab_stage(perrtab_${pfx});"
  > echo "}"
  > echo "#endif"
}

# cc : errors.c -> errors.o @ std.c
+[@std.c](-$cobjpaths; $cfabpaths = [ $errtabpaths ~ sx/errtab/errtab.c ]; $cc $cflags; $cdscpaths)
$errorsobjpaths = [ $cobjpaths ]
