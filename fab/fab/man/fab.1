'\"
.\" Copyright (c) 2012-2014 Todd Freed <todd.freed@gmail.com>
.\"
.\" This file is part of fab.
.\" 
.\" fab is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" fab is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with fab.  If not, see <http://www.gnu.org/licenses/>. */
.\"
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.TH FAB 1 "---BUILDDATE---" "fab----BUILDVERS---" "Fab Manual"
.
.SH NAME
fab \- parallel and incremental builds, integrated dependency discovery
.SH SYNOPSIS
.B fab
.R [
.RI [ "selection modifier" ]
.R |
.RI [ "selector" ]
.R |
.RI [ option ]
.R |
.RI [ logexpr ]
.R |
.RI [ varexpr ]
.R ] ...
.PP
.B fab
.B --help
: options summary
.br
.B fab
.B --version
: version information
.br
.B fab
.B --logopts
: summary of logging options
.br
.B fab
.B --operators
:
.BR listwise(1)
operator listing, including
.B fab
-specific operators
.SH DESCRIPTION
.B fab
is a program that is used to manage compilation of a project, where source files are transformed into build artifacts by executing a series of commands.
.PP
The project is represented by a dependency graph in which each node represents either a source file or a secondary file. There are also nodes that are not backed by any file, so-called nofile nodes, that represent build tasks
.RB "(ex. " "@install" )
or groups of nodes
.RB "(ex. " "@all" )
.PP
Given a set of target nodes, a subgraph is assembled including that includes the target(s) and their eventual dependencies. This graph is pruned of nodes that do not require updating. Finally, a buildplan is created that will bring the target(s) up-to-date.
.PP
The user influences buildplan creation via node selections.
.PP
The default behavior is to select the default node into the fabricate-set.
.SH SELECTIONS
.SS "SELECTORS"
.PP
.TP
.I path
select by relative path
.TP
.BI / path
select by canonical path
.TP
.BI @ name
select by nofile name
.TP
\fB[ \fIlist \fR[\fB ~ \fItransform-string \fR] \fB]
list selection (see EXAMPLES below)
.br
variables
.br
.B $!
: all nodes
.SS "RESOLUTION MODIFIERS"
.TP
\fB+C\fR|\fB-C\fR (default)
relative path selectors resolve against current working directory (default)
.TP
\fB+F\fR|\fB-F\fR
relative path selectors resolve against directory in which the init-fabfile resides
.SS "SELECTION MODIFIERS"
.TP
\fB+t\fR|\fB-t\fR fabricate-set (default)
add nodes to the build plan along with their eventual dependencies
.TP
\fB+x\fR|\fB-x\fR fabricate-exact-set 
add nodes to the buildplan without considering dependencies
.TP
\fB+n\fR|\fB-n\fR fabricate-nofile-set 
add nodes to the buildplan along with their eventual dependencies without traversing a nofile boundary
.TP
\fB+b\fR|\fB-b\fR invalidate-set 
invalidate nodes
.SS "SPECIAL NODE-SETS"
If any of the following node-sets is nonempty, the associated actions are performed instead of buildplan creation/execution
.TP
\fB+d\fR|\fB-d\fR discovery-set 
perform dependency discovery for nodes
.TP
\fB+i\fR|\fB-i\fR inspect-set 
output summary information for nodes
.TP
\fB+q\fR|\fB-q\fR query-set 
list the nodes matched by selectors
.RS
.SH OPTIONS
.SS "Execution Modes"
.TP
.BR \-p 
create buildplan only - do not execute buildplan. Implies \fB+BPDUMP\fP.
.
.SS "Incremental Builds"
.TP
.BR \-B
invalidate all (equivalent to +b [ $! ])
.
.SS "Parallel Builds"
.TP
\fB\-j\fR \fIconcurrency\fR
maximum number of simultaneously executing threads
.RS
.TP
.B -1
limit to heuristic based on detected CPUs (default)
.TP
.B 0
no limit
.TP
.I number
.R limit to
.I number
.
.SS "Bakescripts"
.TP
\fB\-k\fR \fIpath\fR
do not execute buildplan - instead create a bakescript from it, and write it to \fIpath\fP
.TP
\fB-K\fR \fIvarname\fR
\fIvarname\fP will be settable at bakescript execution time
.TP
.BR \--bslic-standard " (default)"
bakescripts are generated with the standard license
.TP
.BR \--bslic-fab
bakescripts are generated with the
.B fab
distribution license
.SS "Fabfile Processing"
.TP
\fB-f\fR \fIpath\fR
locate the initial fabfile at \fIpath\fR rather than ./fabfile
.TP
\fB-I\fR \fIpath\fR
append \fIpath\fP to the list of directories used when resolving invocations
.SS "Variables"
The portion of the option following \fB-v\fP is referred to as the varexpr
.TP
\fB-v $\fIvar\fB=[ \fIlist \fR[ \fB~ \fItransform-string \fR ] \fB]
apply the specified list to the definition of \fIvar\fP at scope-zero
.TP
\fB-v $\fIvar\fB+=[ \fIlist \fR [ \fB~ \fItransform-string\fR ] \fB]
apply the specified list addition to the definition of \fIvar\fP at scope-zero
.TP
\fB-v $\fIvar\fB~=\fItransform-string\fP
apply the transformation specified by \fItransform-string\fP to the definition of \fIvar\fP at scope-zero
.SS "Handling Cycles"
.TP
.BR \--cycles-warn " (default)"
warn when a cycle is detected (once per unique cycle)
.TP
.BR \--cycles-fail
fail when a cycle is detected
.TP
.BR \--cycles-deal
deal with cycles by terminating the traversal (not recommended)
.SS "Logging"
.TP
.BR \--backtrace-pithy " (default)"
produce a summary of the callstack upon failure
.TP
.BR \--backtrace-full
produce a complete description of the callstack upon failure
.TP
.BR \--logtrace-no " (default)"
 omit trace from log messages
.TP
.BR \--logtrace
include file/function/line in log messages
.TP
.BR \--gnid-relative-cwd " (default)"
identify nodes in log messages by path relative to the current working directory
.TP
.BR \--gnid-relative-fabfile-dir
identify nodes in log messages by path relative to init-fabfile-dir
.TP
.BR \--gnid-absolute
identify nodes in log messages by absolute path
.TP
.BR \--gnid-canon
identify nodes in log messages by canonical path
.
.SH LOGOPTS
.TP
 \fB+\fR\fIlogcat
enable log messages tagged with the category \fIlogcat
.TP
 \fB-\fR\fIlogcat
disable log messages tagged with the category \fIlogcat
.SS Categories
.TP
.BR ERROR
errors leading to shutdown
.TP
.BR WARN
nonfatal warnings
.TP
.BR INFO
program flow
.TP
.BR ARGS
program arguments
.TP
.BR PARAMS
program execution parameters
.TP
.BR FFTOKEN
fabfile parsing - token stream
.TP
.BR FFSTATE
fabfile parsing - lexer states
.TP
.BR FFTREE
fabfile parsing - parsed tree
.TP
.BR FFFILE
fabfile parsing - parsed file
.TP
.BR FF
fabfile parsing
.TP
.BR BPINFO
buildplan - flow
.TP
.BR BPEXEC
buildplan - execution
.TP
.BR BPEVAL
buildplan - pruning/evaluating
.TP
.BR BPDUMP
buildplan - dump the final buildplan
.TP
.BR BP
buildplan
.TP
.BR FMLEXEC
formulas - execution results/details
.TP
.BR FML
formulas
.TP
.BR FAB
fabrication formulas
.TP
.BR DSCINFO
dependency discovery - flow
.TP
.BR DSCEXEC
dependency discovery - execution
.TP
.BR DSCNEW
dependency discovery - new nodes/edges
.TP
.BR DSC
dependency discovery
.TP
.BR DGRAPH
dependency graph - dump/details
.TP
.BR DG
dependency graph
.TP
.BR VARAUTO
variable definitions - automatic
.TP
.BR VARUSER
variable definitions - user-defined
.TP
.BR VAR
variable definitions
.TP
.BR INVOKE
fabfile invocations
.TP
.BR SELECT
node selectors
.TP
.BR LISTS
node lists
.TP
.BR INVALID
node invalidation
.TP
.BR LWEXEC
liblistwise - execution
.TP
.BR LWOPINFO
liblistwise - operator info messages
.TP
.BR LWPARSE
liblistwise - transform parsing
.TP
.BR LWTOKEN
liblistwise - transform parsing - token stream
.TP
.BR LWSTATE
liblistwise - transform parsing - lexer states
.TP
.BR LWSANITY
liblistwise - sanity checks
.
.SH EXIT STATUS
An exit status of 0 means success.
.PP
An exit status > 127 means an error was encountered that is not specific to
.BR fab .
.PP
An exit status < 128 means that one of the following \fBfab\fP-specific error was encountered.
.TP
.RB (1) SYNTAX
fabfile is grammatically incorrect
.TP
.RB (2) ILLBYTE
fabfile contains unrecognized byte sequence
.TP
.RB (3) BADTMP
unexpected file(s) in temp directory
.TP
.RB (4) BADCACHE
unexpected file(s) in cache directory
.TP
.RB (5) BADARGS
invalid command-line arguments
.TP
.RB (6) UNSATISFIED
buildplan has unsatisfied dependencies
.TP
.RB (7) FMLFAIL
formula failed to execute successfully
.TP
.RB (8) DSCPARSE
dependency discovery results were not parsed
.TP
.RB (9) NOINVOKE
target of fabfile invocation could not be resolved
.TP
.RB (10) BADPLAN
buildplan cannot be constructed
.TP
.RB (11) EXESUID
fab executable does not have ug+s permissions
.TP
.RB (12) CYCLE
dependency graph contains a cycle
.SH AUTHORS
Todd Freed 
.MT todd.freed@gmail.com
.ME
.SH "SEE ALSO"
.BR listwise(1)
.BR liblistwise(7)
.PP
.URL "http://fabutil.org" "fabutil.org"
