/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
+[ $*/../../vars.fab ]

# source invocations
+[ $dcommon ]() @common
+[ $dfabcore/common/common.fab ~ j ]() @fabcommon

# variables
$sdirs = [ $dfab ~ lsr c -d ]
$copts = [ -fno-builtin-log [ $sdirs ~ s/^/-I ]
	[ -DFABVERSIONS="\""$VERSIONS"\"" ~ j ]
	[ -DFABVERSIONN="\""$VERSIONN"\"" ~ j ]

	# include paths - mark as system to preclude dependency discovery from gcc
	[ [ $dfabcore/common ~ j lsr c -d ] $dlibxapi $dlibxlinux $dlibpstring ~ s/^/-I ]
]

$params = [
	[ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ]
	[ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ]
	[ -DFABTMPDIR="\""$fabtmpdir"\"" ~ j ]
	[ -DFABIPCDIR="\""$fabipcdir"\"" ~ j ]
]

$params_devel = [
	[ -DFABLWOPDIR="\""$fablwopdir_devel"\"" ~ j ]
	[ -DFABINVOKEDIR="\""$fabinvokedir_devel"\"" ~ j ]
	[ -DFABTMPDIR="\""$fabtmpdir_devel"\"" ~ j ]
	[ -DFABIPCDIR="\""$fabipcdir_devel"\"" ~ j ]
]

$cflags_final = [ $cflags_final $copts $params ]
$cflags_debug = [ $cflags_debug $copts $params ]
$cflags_devel = [ $cflags_devel $copts $params_devel ]

$rpath = [ 
	[ $dlibxapi $dlibxlinux $dlibxunit $dlibpstring $dliblistwise ~ [ ?{ [ rb{$*} ~ j ] "s{^}{'-Wl,-rpath,$ORIGIN/}" "s{$}{'}" ~ fi ] ]
]
# -lrt required for glibc < 2.17 as per man clock_gettime
$lopts				= [ -lrt ]
$lflags_final = [ $lflags_final $lopts $libxapi_final $libxlinux_final $libpstring_final $liblistwise_final ]
$lflags_debug = [ $lflags_debug $lopts $libxapi_debug $libxlinux_debug $libpstring_debug $liblistwise_debug ]
$lflags_devel = [ $lflags_devel $lopts $libxapi_devel $libxlinux_devel $libpstring_devel $liblistwise_devel $rpath ]

# standard files - standard nopic compilation
+[@std.c]($dext = [ final.o ]; $rdirs = $sdirs; $cc; $cflags = $cflags_final)
+[@std.c]($dext = [ debug.o ]; $rdirs = $sdirs; $cc; $cflags = $cflags_debug)
+[@std.c]($dext = [ devel.o ]; $rdirs = $sdirs; $cc; $cflags = $cflags_devel; $gccdep = $gccdep_devel)

#
# catchall node
#
[ @final ] : [ $fab_final ]
[ @debug ] : [ $fab_debug ]
[ @devel ] : [ $fab_devel ]

#
# executables
#  -export-dynamic enables dloaded code (in particular, the fab-specific operator so's) to bind to symbols in the executable.
#
[ $fab_final ] :^ [ $libxapi_final $libxlinux_final $libpstring_final $liblistwise_final ]
[ $fab_debug ] :^ [ $libxapi_debug $libxlinux_debug $libpstring_debug $liblistwise_debug ]
[ $fab_devel ] :^ [ $libxapi_devel $libxlinux_devel $libpstring_devel $liblistwise_devel ]

[ $fab_final ] : [ $dfab/main.final.o ~ j ] 
{
	[ $cc ] [ $cflags_final -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_final ~ fi ]
}

[ $fab_debug ] : [ $dfab/main.debug.o ~ j ] 
{
	[ $cc ] [ $cflags_debug -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_debug ~ fi ]
}

[ $fab_devel ] : [ $dfab/main.devel.o ~ j ] 
{
	[ $cc ] [ $cflags_devel -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_devel ~ fi ]
}

#
# tasks
#

[ @install.final ] : [ @final ]
{
	install -d																			[ $destdir/$bindir ]
	rm																							[ $destdir/$bindir/fab ] 2>/dev/null
	install [ $fab_final ]													[ $destdir/$bindir/fab ]
	chown fabsys:fabsys															[ $destdir/$bindir/fab ]
	chmod ug+s																			[ $destdir/$bindir/fab ]
}

[ @install.debug ] : [ @debug ]
{
	install -d																			[ $destdir/$bindir ]
	rm																							[ $destdir/$bindir/fab ] 2>/dev/null
	install [ $fab_debug ]													[ $destdir/$bindir/fab ]
}
