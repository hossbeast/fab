/* Copyright (c) 2012-2013 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
+[ $*/../../vars.fab ]

# source invocations
+[ $dcommon ]() @common

# variables
$copts = [ -fno-builtin-log [ $dfabd [ $dfabd/../error ~ j ] [ $dfabd/../args  ~ j ] ~ lsr c -d s/^/-I ]

	[ -DFABVERSIONS="\""$VERSIONS"\"" ~ j ]
	[ -DFABVERSIONN="\""$VERSIONN"\"" ~ j ]
	[ -DFABCACHEDIR="\""$fabcachedir"\"" ~ j ]
	[ -DFABTMPDIR="\""$fabtmpdir"\"" ~ j ]
	[ -DFABIPCDIR="\""$fabipcdir"\"" ~ j ]

	# include paths
	[ $dlibxapi $dlibxlinux $dliblistwise $dlibpstring ~ s/^/-I ]
]

$cflags_final = [ $cflags_final $copts [ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ] [ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ] ]
$cflags_debug = [ $cflags_debug $copts [ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ] [ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ] ]
$cflags_devel = [ $cflags_devel $copts [ -DFABLWOPDIR="\""$fablwopdir_devel"\"" ~ j ] [ -DFABINVOKEDIR="\""$fabinvokedir_devel"\"" ~ j ] ]

$rpath = [ 
	[ $dlibxapi $dlibxlinux $dlibxunit $dlibpstring $dliblistwise ~ [ ?{ [ rb{$*} ~ j ] "s{^}{'-Wl,-rpath,$ORIGIN/}" "s{$}{'}" ~ fi ] ]
]
$lflags_final = [ $lflags_final $libxapi_final $libxlinux_final $libpstring_final $liblistwise_final ]
$lflags_debug = [ $lflags_debug $libxapi_debug $libxlinux_debug $libpstring_debug $liblistwise_debug ]
$lflags_devel = [ $lflags_devel $libxapi_devel $libxlinux_devel $libpstring_devel $liblistwise_devel $rpath ]

# standard files - standard compilation
+[@std.c]($dext = [ final.o ]; $rdirs = $dfabd; $paths = [ $dfabd/main.c ~ j ]; $cc; $cflags = $cflags_final)
+[@std.c]($dext = [ debug.o ]; $rdirs = $dfabd; $paths = [ $dfabd/main.c ~ j ]; $cc; $cflags = $cflags_debug)
+[@std.c]($dext = [ devel.o ]; $rdirs = $dfabd; $paths = [ $dfabd/main.c ~ j ]; $cc; $cflags = $cflags_devel; $gccdep = $gccdep_devel)

+[@std.l]($dext = [ final.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $flex $flexflags; $cflags = $cflags_final)
+[@std.l]($dext = [ debug.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $flex $flexflags; $cflags = $cflags_debug)
+[@std.l]($dext = [ devel.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $flex $flexflags; $cflags = $cflags_devel)

+[@std.y]($dext = [ final.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $bison $bisonflags; $cflags = $cflags_final)
+[@std.y]($dext = [ debug.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $bison $bisonflags; $cflags = $cflags_debug)
+[@std.y]($dext = [ devel.o ]; $gendir = $dfabd; $rdirs = $dfab; $cc $bison $bisonflags; $cflags = $cflags_devel)

# generated files
+[@std.flex.states] ($dext = [ final.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_final)
+[@std.flex.states] ($dext = [ debug.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_debug)
+[@std.flex.states] ($dext = [ devel.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_devel)
+[@std.bison.tokens]($dext = [ final.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_final)
+[@std.bison.tokens]($dext = [ debug.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_debug)
+[@std.bison.tokens]($dext = [ devel.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_devel)
+[@std.xapi.errtab] ($dext = [ final.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_final)
+[@std.xapi.errtab] ($dext = [ debug.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_debug)
+[@std.xapi.errtab] ($dext = [ devel.o ]; $gendir = $dfab; $rdirs = $dfab; $cc; $cflags = $cflags_devel)

#
# catchall node
#
[ @final ] : [ $fabd_final ]
[ @debug ] : [ $fabd_debug ]
[ @devel ] : [ $fabd_devel ]

#
# executables
#  -export-dynamic enables dloaded code (in particular, the fab-specific operator so's) to bind to symbols in the executable.
#
[ $fabd_final ] :^ [ $libxapi_final $libxlinux_final $libpstring_final $liblistwise_final ]
[ $fabd_debug ] :^ [ $libxapi_debug $libxlinux_debug $libpstring_debug $liblistwise_debug ]
[ $fabd_devel ] :^ [ $libxapi_devel $libxlinux_devel $libpstring_devel $liblistwise_devel ]

[ $fabd_final ] : [ $dfabd/main.final.o ~ j ] 
{
	[ $cc ] [ $cflags_final -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_final ~ fi ]
}

[ $fabd_debug ] : [ $dfabd/main.debug.o ~ j ] 
{
	[ $cc ] [ $cflags_debug -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_debug ~ fi ]
}

[ $fabd_devel ] : [ $dfabd/main.devel.o ~ j ] 
{
	[ $cc ] [ $cflags_devel -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_devel ~ fi ]
}

#
# tasks
#

[ @install.final ] : [ @final ]
{
	install -d																			[ $destdir/$bindir ]
	install [ $fabd_final ]													[ $destdir/$bindir/fabd ]
}

[ @install.debug ] : [ @debug ]
{
	install -d																			[ $destdir/$bindir ]
	install [ $fabd_debug ]													[ $destdir/$bindir/fabd ]
}
