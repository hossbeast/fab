/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
+[ $*/../../vars.fab ]

# source invocations
+[ $dcommon ]() @common

# variables
$copts = [
  [ -DFABVERSIONS="\""$VERSIONS"\"" ~ j ]
  [ -DFABVERSIONN="\""$VERSIONN"\"" ~ j ]
  [ [ $* ~ lsr c -d ] $dlibxapi $dlibxlinux $dliblistwise $dlibvalyria $dlibvalue $dliblogger $dlibnarrator $dlibfab $dliblorien $dlibyyutil ~ s/^/-I ]
]

$params = [
  [ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ]
  [ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ]
  [ -DFABTMPDIR="\""$fabtmpdir"\"" ~ j ]
  [ -DFABIPCDIR="\""$fabipcdir"\"" ~ j ]
]

$params_devel = [
  [ -DFABLWOPDIR="\""$fablwopdir_devel"\"" ~ j ]
  [ -DFABINVOKEDIR="\""$fabinvokedir_devel"\"" ~ j ]
  [ -DFABTMPDIR="\""$fabtmpdir_devel"\"" ~ j ]
  [ -DFABIPCDIR="\""$fabipcdir_devel"\"" ~ j ]
]

$cflags_xapi_final = [ $cflags_xapi_final $copts $params ]
$cflags_xapi_debug = [ $cflags_xapi_debug $copts $params ]
$cflags_xapi_devel = [ $cflags_xapi_devel $copts $params_devel ]
$cflags_xapi_xunit = [ $cflags_xapi_xunit $copts -fPIC ]

$rpath = [ 
  [ $dlibxapi $dlibxlinux $dliblistwise $dlibvalyria $dlibvalue $dliblogger $dlibxunit $dlibnarrator $dlibfab $dliblorien $dlibyyutil ~ [ ?{ [ rb{$*} ~ j ] "s{^}{'-Wl,-rpath,$ORIGIN/}" "s{$}{'}" ~ fi ] ]
]

# -lrt required for glibc < 2.17 as per man clock_gettime
$lopts             = [ -lrt ]
$lflags_xapi_final = [ $lflags_xapi_final $lopts $libxapi_xapi_final $libxlinux_xapi_final $liblistwise_xapi_final $libvalyria_xapi_final $libvalue_xapi_final $liblogger_xapi_final $libnarrator_xapi_final $liblorien_xapi_final $libfab_xapi_final $libyyutil_xapi_final ]
$lflags_xapi_debug = [ $lflags_xapi_debug $lopts $libxapi_xapi_debug $libxlinux_xapi_debug $liblistwise_xapi_debug $libvalyria_xapi_debug $libvalue_xapi_debug $liblogger_xapi_debug $libnarrator_xapi_debug $liblorien_xapi_debug $libfab_xapi_debug $libyyutil_xapi_debug ]
$lflags_xapi_devel = [ $lflags_xapi_devel $lopts $libxapi_xapi_devel $libxlinux_xapi_devel $liblistwise_xapi_devel $libvalyria_xapi_devel $libvalue_xapi_devel $liblogger_xapi_devel $libnarrator_xapi_devel $liblorien_xapi_devel $libfab_xapi_devel $libyyutil_xapi_devel $rpath ]

# standard files - standard compilation
+[@std.c]($dext = [ xapi.final.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_final)
+[@std.c]($dext = [ xapi.debug.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_debug)
+[@std.c]($dext = [ xapi.devel.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_devel)
+[@std.c]($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_xunit)
+[@std.l]($dext = [ xapi.final.o ]; $rdirs = $*; $cc $flex $flexflags; $cflags = $cflags_xapi_final)
+[@std.l]($dext = [ xapi.debug.o ]; $rdirs = $*; $cc $flex $flexflags; $cflags = $cflags_xapi_debug)
+[@std.l]($dext = [ xapi.devel.o ]; $rdirs = $*; $cc $flex $flexflags; $cflags = $cflags_xapi_devel)
+[@std.l]($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $cc $flex $flexflags; $cflags = $cflags_xapi_xunit)
+[@std.y]($dext = [ xapi.final.o ]; $rdirs = $*; $cc $bison $bisonflags; $cflags = $cflags_xapi_final)
+[@std.y]($dext = [ xapi.debug.o ]; $rdirs = $*; $cc $bison $bisonflags; $cflags = $cflags_xapi_debug)
+[@std.y]($dext = [ xapi.devel.o ]; $rdirs = $*; $cc $bison $bisonflags; $cflags = $cflags_xapi_devel)
+[@std.y]($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $cc $bison $bisonflags; $cflags = $cflags_xapi_xunit)

# generated files
+[@std.xapi.errtab] ($dext = [ xapi.final.o ]; $rdirs = $*; $apidata = [1]; $cc; $cflags = $cflags_xapi_final)
+[@std.xapi.errtab] ($dext = [ xapi.debug.o ]; $rdirs = $*; $apidata = [1]; $cc; $cflags = $cflags_xapi_debug)
+[@std.xapi.errtab] ($dext = [ xapi.devel.o ]; $rdirs = $*; $apidata = [1]; $cc; $cflags = $cflags_xapi_devel)
+[@std.xapi.errtab] ($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $apidata = [1]; $cc; $cflags = $cflags_xapi_xunit)
+[@std.flex.states] ($dext = [ xapi.final.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_final)
+[@std.flex.states] ($dext = [ xapi.debug.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_debug)
+[@std.flex.states] ($dext = [ xapi.devel.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_devel)
+[@std.flex.states] ($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_xunit)
+[@std.bison.tokens]($dext = [ xapi.final.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_final)
+[@std.bison.tokens]($dext = [ xapi.debug.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_debug)
+[@std.bison.tokens]($dext = [ xapi.devel.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_devel)
+[@std.bison.tokens]($dext = [ xapi.xunit.pic.o ]; $rdirs = $*; $cc; $cflags = $cflags_xapi_xunit)

#
# catchall node
#
[ @all ] : [ @release @test ]
[ @release ] : [ @final @debug @devel ]
[ @final ] : [ $fabd_final ]
[ @debug ] : [ $fabd_debug ]
[ @devel ] : [ $fabd_devel ]

#
# executables
#  -export-dynamic enables dloaded code (in particular, the fab-specific operator so's) to bind to symbols in the executable.
#
[ $fabd_final ] :^ [ $libxapi_xapi_final $libxlinux_xapi_final $liblistwise_xapi_final $libvalyria_xapi_final $libvalue_xapi_final $liblogger_xapi_final $libnarrator_xapi_final $liblorien_xapi_final $libfab_xapi_final ]
[ $fabd_debug ] :^ [ $libxapi_xapi_debug $libxlinux_xapi_debug $liblistwise_xapi_debug $libvalyria_xapi_debug $libvalue_xapi_debug $liblogger_xapi_debug $libnarrator_xapi_debug $liblorien_xapi_debug $libfab_xapi_debug ]
[ $fabd_devel ] :^ [ $libxapi_xapi_devel $libxlinux_xapi_devel $liblistwise_xapi_devel $libvalyria_xapi_devel $libvalue_xapi_devel $liblogger_xapi_devel $libnarrator_xapi_devel $liblorien_xapi_devel $libfab_xapi_devel ]

[ $fabd_final ] : [[ $*/main.xapi.final.o ~ j ] ]
{
  [ $cc ] [ $cflags_xapi_final -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_final ~ fi ]
}

[ $fabd_debug ] : [[ $*/main.xapi.debug.o ~ j ] ]
{
  [ $cc ] [ $cflags_xapi_debug -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_debug ~ fi ]
}

[ $fabd_devel ] : [[ $*/main.xapi.devel.o ~ j ] ]
{
  [ $cc ] [ $cflags_xapi_devel -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags_xapi_devel ~ fi ]
}

#
# tasks
#

# base install
[ @install.base.final ] : [ @final ]
{
  install -d                                      [ $destdir/$bindir ]
  rm                                              [ $destdir/$bindir/fabd ] 2>/dev/null
  install [ $fabd_final ]                         [ $destdir/$bindir/fabd ]
}

# dist install meant for packagers - it does not include file ownership/permissions
# which would be supplied by the deb/rpm/etc
[ @install.dist.final ] : [ @install.base.final ]

# local install
[ @install.local.final ] : [ @install.base.final ]
{
  chown fabsys:fabsys                             [ $destdir/$bindir/fabd ]
  chmod ug+s                                      [ $destdir/$bindir/fabd ]
}

[ @install.base.debug ] : [ @debug ]
{
  install -d                                      [ $destdir/$bindir ]
  rm                                              [ $destdir/$bindir/fabd ] 2>/dev/null
  install [ $fabd_debug ]                         [ $destdir/$bindir/fabd ]
}

[ @install.dist.debug ] : [ @install.base.debug ]
[ @install.local.debug ] : [ @install.base.debug ]

#
# unit tests
#

[ $* ~ lsr l/test\/test_ sx/c/xapi.xunit.so sy dj shift ] :: [ [ $< ~ sx/so/pic.o ] ]
{
  [ $cc ] [ $cflags -shared ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw lx/o uu fi ]
}

[ @test ] : [ $* ~ lsr l/test\/test_ sx/c/xapi.xunit.so sy ]
{
  (
    [ $xunit_valgrind_runner ] [ $xunit_xapi_devel ] [
    ] [ $libxlinux_xapi_devel $libvalyria_xapi_devel $libyyutil_xapi_devel $libvalue_xapi_devel ~ fi ] [
    ] [ $liblogger_xapi_devel $libnarrator_xapi_devel $liblorien_xapi_devel $libfab_xapi_devel ~ fi ] [
    ] [ $@ ~ rx/ineed fi ] +UNIT
  ) | tee /dev/fd/501
  > exit ${PIPESTATUS[0]}
}

[ @test.fast ] : [ $* ~ lsr l/test\/test_ sx/c/xapi.xunit.so sy ]
{
  (
    [ $xunit_xapi_devel ] [
    ] [ $libxlinux_xapi_devel $libvalyria_xapi_devel $libyyutil_xapi_devel $libvalue_xapi_devel ~ fi ] [
    ] [ $liblogger_xapi_devel $libnarrator_xapi_devel $liblorien_xapi_devel $libfab_xapi_devel ~ fi ] [
    ] [ $@ ~ rx/ineed fi ] +UNIT
  ) | tee /dev/fd/501
  > exit ${PIPESTATUS[0]}
}
