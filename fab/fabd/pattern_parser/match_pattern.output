Terminals unused in grammar

    ':'
    '?'
    '$'
    "/"
    "module"
    "modules"
    "shadow"
    "up"
    "down"
    "self-or-below"
    "dirs"
    "requires"
    "uses"


State 19 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce


Grammar

    0 $accept: utterance $end

    1 utterance: pattern

    2 pattern: pattern-sections-list

    3 pattern-sections-list: pattern-sections-list '/' pattern-section
    4                      | pattern-section

    5 pattern-section: pattern-dentry-list
    6                | "**" pattern-qualifiers

    7 pattern-dentry-list: pattern-dentry pattern-qualifier-list
    8                    | pattern-dentry

    9 pattern-dentry: pattern-dentry-parts

   10 pattern-dentry-parts: pattern-dentry-parts pattern-dentry-part
   11                     | pattern-dentry-part

   12 pattern-dentry-part: alternation
   13                    | class
   14                    | star
   15                    | string-literal

   16 pattern-qualifiers: pattern-qualifier-list
   17                   | %empty

   18 pattern-qualifier-list: pattern-qualifier-list pattern-qualifier
   19                       | pattern-qualifier

   20 pattern-qualifier: '+' pattern-qualifier-parts
   21                  | '~' pattern-qualifier-parts

   22 pattern-qualifier-parts: pattern-qualifier-parts pattern-qualifier-part
   23                        | pattern-qualifier-part

   24 pattern-qualifier-part: alternation
   25                       | class
   26                       | string-literal

   27 star: '*'

   28 class: '[' class-parts ']'
   29      | '[' '!' class-parts ']'

   30 class-parts: class-parts class-pattern
   31            | class-pattern

   32 class-pattern: class-part

   33 class-part: class-range
   34           | class-char

   35 class-range: CHAR '-' CHAR

   36 class-char: CHAR

   37 alternation: '{' alternation-parts-with-epsilon '}'
   38            | '{' alternation-parts-without-epsilon '}'

   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon ',' alternation-pattern
   40                                  | alternation-pattern

   41 alternation-parts-with-epsilon: alternation-parts-without-epsilon ',' alternation-part-epsilon
   42                               | alternation-part-epsilon ',' alternation-parts-without-epsilon

   43 alternation-part-epsilon: %empty

   44 alternation-pattern: alternation-pattern-parts

   45 alternation-pattern-parts: alternation-pattern-parts alternation-pattern-part
   46                          | alternation-pattern-part

   47 alternation-pattern-part: alternation
   48                         | class
   49                         | string-literal

   50 string-literal: unquoted-string-literal
   51               | quoted-string-literal

   52 unquoted-string-literal: unquoted-strpart

   53 quoted-string-literal: '"' quoted-strparts '"'
   54                      | '"' '"'

   55 quoted-strparts: quoted-strparts quoted-strpart
   56                | quoted-strpart

   57 quoted-strpart: unquoted-strpart
   58               | escape

   59 unquoted-strpart: word

   60 word: word-tokens
   61     | uint16

   62 word-tokens: "string"
   63            | 'D'
   64            | '+'

   65 escape: "character-escape"
   66       | "hex-escape"

   67 uint16: INTMAX8
   68       | INTMAX16
   69       | UINTMAX8
   70       | UINTMAX16


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 29
    '"' (34) 53 54
    '$' (36)
    '*' (42) 27
    '+' (43) 20 64
    ',' (44) 39 41 42
    '-' (45) 35
    '/' (47) 3
    ':' (58)
    '?' (63)
    'D' (68) 63
    '[' (91) 28 29
    ']' (93) 28 29
    UINTMAX8 <yyu.umax> (100) 69
    UINTMAX16 <yyu.umax> (101) 70
    INTMAX8 <yyu.imax> (102) 67
    INTMAX16 <yyu.imax> (103) 68
    "string" (104) 62
    "character-escape" <yyu.u8> (105) 65
    "hex-escape" <yyu.u8> (106) 66
    "**" (107) 6
    "/" (108)
    CHAR <yyu.u8> (109) 35 36
    "module" (110)
    "modules" (111)
    "shadow" (112)
    "up" (113)
    "down" (114)
    "self-or-below" (115)
    "dirs" (116)
    "requires" (117)
    "uses" (118)
    '{' (123) 37 38
    '}' (125) 37 38
    '~' (126) 21
    error (256)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    utterance (39)
        on left: 1
        on right: 0
    pattern <pattern> (40)
        on left: 2
        on right: 1
    pattern-sections-list <section> (41)
        on left: 3 4
        on right: 2 3
    pattern-section <section> (42)
        on left: 5 6
        on right: 3 4
    pattern-dentry-list <segments> (43)
        on left: 7 8
        on right: 5
    pattern-dentry <segments> (44)
        on left: 9
        on right: 7 8
    pattern-dentry-parts <segment> (45)
        on left: 10 11
        on right: 9 10
    pattern-dentry-part <segment> (46)
        on left: 12 13 14 15
        on right: 10 11
    pattern-qualifiers <segments> (47)
        on left: 16 17
        on right: 6
    pattern-qualifier-list <segments> (48)
        on left: 18 19
        on right: 7 16 18
    pattern-qualifier <segments> (49)
        on left: 20 21
        on right: 18 19
    pattern-qualifier-parts <segment> (50)
        on left: 22 23
        on right: 20 21 22
    pattern-qualifier-part <segment> (51)
        on left: 24 25 26
        on right: 22 23
    star <segment> (52)
        on left: 27
        on right: 14
    class <segment> (53)
        on left: 28 29
        on right: 13 25 48
    class-parts <segments> (54)
        on left: 30 31
        on right: 28 29 30
    class-pattern <segments> (55)
        on left: 32
        on right: 30 31
    class-part <segment> (56)
        on left: 33 34
        on right: 32
    class-range <segment> (57)
        on left: 35
        on right: 33
    class-char <segment> (58)
        on left: 36
        on right: 34
    alternation <segment> (59)
        on left: 37 38
        on right: 12 24 47
    alternation-parts-without-epsilon <segments> (60)
        on left: 39 40
        on right: 38 39 41 42
    alternation-parts-with-epsilon <segments> (61)
        on left: 41 42
        on right: 37
    alternation-part-epsilon (62)
        on left: 43
        on right: 41 42
    alternation-pattern <segments> (63)
        on left: 44
        on right: 39 40
    alternation-pattern-parts <segment> (64)
        on left: 45 46
        on right: 44 45
    alternation-pattern-part <segment> (65)
        on left: 47 48 49
        on right: 45 46
    string-literal <segment> (66)
        on left: 50 51
        on right: 15 26 49
    unquoted-string-literal <segment> (67)
        on left: 52
        on right: 50
    quoted-string-literal <segment> (68)
        on left: 53 54
        on right: 51
    quoted-strparts <segment> (69)
        on left: 55 56
        on right: 53 55
    quoted-strpart <segment> (70)
        on left: 57 58
        on right: 55 56
    unquoted-strpart <segment> (71)
        on left: 59
        on right: 52 57
    word <segment> (72)
        on left: 60 61
        on right: 59
    word-tokens (73)
        on left: 62 63 64
        on right: 60
    escape <segment> (74)
        on left: 65 66
        on right: 58
    uint16 <yyu.umax> (75)
        on left: 67 68 69 70
        on right: 61


State 0

    0 $accept: • utterance $end
    1 utterance: • pattern
    2 pattern: • pattern-sections-list
    3 pattern-sections-list: • pattern-sections-list '/' pattern-section
    4                      | • pattern-section
    5 pattern-section: • pattern-dentry-list
    6                | • "**" pattern-qualifiers
    7 pattern-dentry-list: • pattern-dentry pattern-qualifier-list
    8                    | • pattern-dentry
    9 pattern-dentry: • pattern-dentry-parts
   10 pattern-dentry-parts: • pattern-dentry-parts pattern-dentry-part
   11                     | • pattern-dentry-part
   12 pattern-dentry-part: • alternation
   13                    | • class
   14                    | • star
   15                    | • string-literal
   27 star: • '*'
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    "**"       shift, and go to state 9
    '*'        shift, and go to state 10
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    utterance                go to state 13
    pattern                  go to state 14
    pattern-sections-list    go to state 15
    pattern-section          go to state 16
    pattern-dentry-list      go to state 17
    pattern-dentry           go to state 18
    pattern-dentry-parts     go to state 19
    pattern-dentry-part      go to state 20
    star                     go to state 21
    class                    go to state 22
    alternation              go to state 23
    string-literal           go to state 24
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30


State 1

   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   37            | '{' • alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   38            | '{' • alternation-parts-without-epsilon '}'
   39 alternation-parts-without-epsilon: • alternation-parts-without-epsilon ',' alternation-pattern
   40                                  | • alternation-pattern
   41 alternation-parts-with-epsilon: • alternation-parts-without-epsilon ',' alternation-part-epsilon
   42                               | • alternation-part-epsilon ',' alternation-parts-without-epsilon
   43 alternation-part-epsilon: • %empty  [',']
   44 alternation-pattern: • alternation-pattern-parts
   45 alternation-pattern-parts: • alternation-pattern-parts alternation-pattern-part
   46                          | • alternation-pattern-part
   47 alternation-pattern-part: • alternation
   48                         | • class
   49                         | • string-literal
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    $default  reduce using rule 43 (alternation-part-epsilon)

    class                              go to state 31
    alternation                        go to state 32
    alternation-parts-without-epsilon  go to state 33
    alternation-parts-with-epsilon     go to state 34
    alternation-part-epsilon           go to state 35
    alternation-pattern                go to state 36
    alternation-pattern-parts          go to state 37
    alternation-pattern-part           go to state 38
    string-literal                     go to state 39
    unquoted-string-literal            go to state 25
    quoted-string-literal              go to state 26
    unquoted-strpart                   go to state 27
    word                               go to state 28
    word-tokens                        go to state 29
    uint16                             go to state 30


State 2

   28 class: '[' • class-parts ']'
   29      | '[' • '!' class-parts ']'
   30 class-parts: • class-parts class-pattern
   31            | • class-pattern
   32 class-pattern: • class-part
   33 class-part: • class-range
   34           | • class-char
   35 class-range: • CHAR '-' CHAR
   36 class-char: • CHAR

    CHAR  shift, and go to state 40
    '!'   shift, and go to state 41

    class-parts    go to state 42
    class-pattern  go to state 43
    class-part     go to state 44
    class-range    go to state 45
    class-char     go to state 46


State 3

   64 word-tokens: '+' •

    $default  reduce using rule 64 (word-tokens)


State 4

   69 uint16: UINTMAX8 •

    $default  reduce using rule 69 (uint16)


State 5

   70 uint16: UINTMAX16 •

    $default  reduce using rule 70 (uint16)


State 6

   67 uint16: INTMAX8 •

    $default  reduce using rule 67 (uint16)


State 7

   68 uint16: INTMAX16 •

    $default  reduce using rule 68 (uint16)


State 8

   62 word-tokens: "string" •

    $default  reduce using rule 62 (word-tokens)


State 9

    6 pattern-section: "**" • pattern-qualifiers
   16 pattern-qualifiers: • pattern-qualifier-list
   17                   | • %empty  [$end, '/']
   18 pattern-qualifier-list: • pattern-qualifier-list pattern-qualifier
   19                       | • pattern-qualifier
   20 pattern-qualifier: • '+' pattern-qualifier-parts
   21                  | • '~' pattern-qualifier-parts

    '~'  shift, and go to state 47
    '+'  shift, and go to state 48

    $default  reduce using rule 17 (pattern-qualifiers)

    pattern-qualifiers      go to state 49
    pattern-qualifier-list  go to state 50
    pattern-qualifier       go to state 51


State 10

   27 star: '*' •

    $default  reduce using rule 27 (star)


State 11

   53 quoted-string-literal: '"' • quoted-strparts '"'
   54                      | '"' • '"'
   55 quoted-strparts: • quoted-strparts quoted-strpart
   56                | • quoted-strpart
   57 quoted-strpart: • unquoted-strpart
   58               | • escape
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   65 escape: • "character-escape"
   66       | • "hex-escape"
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '+'                 shift, and go to state 3
    UINTMAX8            shift, and go to state 4
    UINTMAX16           shift, and go to state 5
    INTMAX8             shift, and go to state 6
    INTMAX16            shift, and go to state 7
    "string"            shift, and go to state 8
    "character-escape"  shift, and go to state 52
    "hex-escape"        shift, and go to state 53
    '"'                 shift, and go to state 54
    'D'                 shift, and go to state 12

    quoted-strparts   go to state 55
    quoted-strpart    go to state 56
    unquoted-strpart  go to state 57
    word              go to state 28
    word-tokens       go to state 29
    escape            go to state 58
    uint16            go to state 30


State 12

   63 word-tokens: 'D' •

    $default  reduce using rule 63 (word-tokens)


State 13

    0 $accept: utterance • $end

    $end  shift, and go to state 59


State 14

    1 utterance: pattern •

    $default  reduce using rule 1 (utterance)


State 15

    2 pattern: pattern-sections-list •  [$end]
    3 pattern-sections-list: pattern-sections-list • '/' pattern-section

    '/'  shift, and go to state 60

    $default  reduce using rule 2 (pattern)


State 16

    4 pattern-sections-list: pattern-section •

    $default  reduce using rule 4 (pattern-sections-list)


State 17

    5 pattern-section: pattern-dentry-list •

    $default  reduce using rule 5 (pattern-section)


State 18

    7 pattern-dentry-list: pattern-dentry • pattern-qualifier-list
    8                    | pattern-dentry •  [$end, '/']
   18 pattern-qualifier-list: • pattern-qualifier-list pattern-qualifier
   19                       | • pattern-qualifier
   20 pattern-qualifier: • '+' pattern-qualifier-parts
   21                  | • '~' pattern-qualifier-parts

    '~'  shift, and go to state 47
    '+'  shift, and go to state 48

    $default  reduce using rule 8 (pattern-dentry-list)

    pattern-qualifier-list  go to state 61
    pattern-qualifier       go to state 51


State 19

    9 pattern-dentry: pattern-dentry-parts •  [$end, '~', '+', '/']
   10 pattern-dentry-parts: pattern-dentry-parts • pattern-dentry-part
   12 pattern-dentry-part: • alternation
   13                    | • class
   14                    | • star
   15                    | • string-literal
   27 star: • '*'
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '*'        shift, and go to state 10
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    '+'       [reduce using rule 9 (pattern-dentry)]
    $default  reduce using rule 9 (pattern-dentry)

    pattern-dentry-part      go to state 62
    star                     go to state 21
    class                    go to state 22
    alternation              go to state 23
    string-literal           go to state 24
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30

    shift/reduce conflict on token '+':
        9 pattern-dentry: pattern-dentry-parts •
       64 word-tokens: • '+'
      Example: pattern-dentry-parts • '+' alternation
      Shift derivation
        pattern-dentry-list
        ↳ pattern-dentry
          ↳ pattern-dentry-parts
            ↳ pattern-dentry-parts                               pattern-dentry-part
              ↳ pattern-dentry-parts pattern-dentry-part         ↳ alternation
                                     ↳ string-literal
                                       ↳ unquoted-string-literal
                                         ↳ unquoted-strpart
                                           ↳ word
                                             ↳ word-tokens
                                               ↳ • '+'
      Example: pattern-dentry-parts • '+' alternation
      Reduce derivation
        pattern-dentry-list
        ↳ pattern-dentry           pattern-qualifier-list
          ↳ pattern-dentry-parts • ↳ pattern-qualifier
                                     ↳ '+' pattern-qualifier-parts
                                           ↳ pattern-qualifier-part
                                             ↳ alternation



State 20

   11 pattern-dentry-parts: pattern-dentry-part •

    $default  reduce using rule 11 (pattern-dentry-parts)


State 21

   14 pattern-dentry-part: star •

    $default  reduce using rule 14 (pattern-dentry-part)


State 22

   13 pattern-dentry-part: class •

    $default  reduce using rule 13 (pattern-dentry-part)


State 23

   12 pattern-dentry-part: alternation •

    $default  reduce using rule 12 (pattern-dentry-part)


State 24

   15 pattern-dentry-part: string-literal •

    $default  reduce using rule 15 (pattern-dentry-part)


State 25

   50 string-literal: unquoted-string-literal •

    $default  reduce using rule 50 (string-literal)


State 26

   51 string-literal: quoted-string-literal •

    $default  reduce using rule 51 (string-literal)


State 27

   52 unquoted-string-literal: unquoted-strpart •

    $default  reduce using rule 52 (unquoted-string-literal)


State 28

   59 unquoted-strpart: word •

    $default  reduce using rule 59 (unquoted-strpart)


State 29

   60 word: word-tokens •

    $default  reduce using rule 60 (word)


State 30

   61 word: uint16 •

    $default  reduce using rule 61 (word)


State 31

   48 alternation-pattern-part: class •

    $default  reduce using rule 48 (alternation-pattern-part)


State 32

   47 alternation-pattern-part: alternation •

    $default  reduce using rule 47 (alternation-pattern-part)


State 33

   38 alternation: '{' alternation-parts-without-epsilon • '}'
   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon • ',' alternation-pattern
   41 alternation-parts-with-epsilon: alternation-parts-without-epsilon • ',' alternation-part-epsilon

    '}'  shift, and go to state 63
    ','  shift, and go to state 64


State 34

   37 alternation: '{' alternation-parts-with-epsilon • '}'

    '}'  shift, and go to state 65


State 35

   42 alternation-parts-with-epsilon: alternation-part-epsilon • ',' alternation-parts-without-epsilon

    ','  shift, and go to state 66


State 36

   40 alternation-parts-without-epsilon: alternation-pattern •

    $default  reduce using rule 40 (alternation-parts-without-epsilon)


State 37

   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   44 alternation-pattern: alternation-pattern-parts •  ['}', ',']
   45 alternation-pattern-parts: alternation-pattern-parts • alternation-pattern-part
   47 alternation-pattern-part: • alternation
   48                         | • class
   49                         | • string-literal
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    $default  reduce using rule 44 (alternation-pattern)

    class                     go to state 31
    alternation               go to state 32
    alternation-pattern-part  go to state 67
    string-literal            go to state 39
    unquoted-string-literal   go to state 25
    quoted-string-literal     go to state 26
    unquoted-strpart          go to state 27
    word                      go to state 28
    word-tokens               go to state 29
    uint16                    go to state 30


State 38

   46 alternation-pattern-parts: alternation-pattern-part •

    $default  reduce using rule 46 (alternation-pattern-parts)


State 39

   49 alternation-pattern-part: string-literal •

    $default  reduce using rule 49 (alternation-pattern-part)


State 40

   35 class-range: CHAR • '-' CHAR
   36 class-char: CHAR •  [']', CHAR]

    '-'  shift, and go to state 68

    $default  reduce using rule 36 (class-char)


State 41

   29 class: '[' '!' • class-parts ']'
   30 class-parts: • class-parts class-pattern
   31            | • class-pattern
   32 class-pattern: • class-part
   33 class-part: • class-range
   34           | • class-char
   35 class-range: • CHAR '-' CHAR
   36 class-char: • CHAR

    CHAR  shift, and go to state 40

    class-parts    go to state 69
    class-pattern  go to state 43
    class-part     go to state 44
    class-range    go to state 45
    class-char     go to state 46


State 42

   28 class: '[' class-parts • ']'
   30 class-parts: class-parts • class-pattern
   32 class-pattern: • class-part
   33 class-part: • class-range
   34           | • class-char
   35 class-range: • CHAR '-' CHAR
   36 class-char: • CHAR

    ']'   shift, and go to state 70
    CHAR  shift, and go to state 40

    class-pattern  go to state 71
    class-part     go to state 44
    class-range    go to state 45
    class-char     go to state 46


State 43

   31 class-parts: class-pattern •

    $default  reduce using rule 31 (class-parts)


State 44

   32 class-pattern: class-part •

    $default  reduce using rule 32 (class-pattern)


State 45

   33 class-part: class-range •

    $default  reduce using rule 33 (class-part)


State 46

   34 class-part: class-char •

    $default  reduce using rule 34 (class-part)


State 47

   21 pattern-qualifier: '~' • pattern-qualifier-parts
   22 pattern-qualifier-parts: • pattern-qualifier-parts pattern-qualifier-part
   23                        | • pattern-qualifier-part
   24 pattern-qualifier-part: • alternation
   25                       | • class
   26                       | • string-literal
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    pattern-qualifier-parts  go to state 72
    pattern-qualifier-part   go to state 73
    class                    go to state 74
    alternation              go to state 75
    string-literal           go to state 76
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30


State 48

   20 pattern-qualifier: '+' • pattern-qualifier-parts
   22 pattern-qualifier-parts: • pattern-qualifier-parts pattern-qualifier-part
   23                        | • pattern-qualifier-part
   24 pattern-qualifier-part: • alternation
   25                       | • class
   26                       | • string-literal
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    pattern-qualifier-parts  go to state 77
    pattern-qualifier-part   go to state 73
    class                    go to state 74
    alternation              go to state 75
    string-literal           go to state 76
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30


State 49

    6 pattern-section: "**" pattern-qualifiers •

    $default  reduce using rule 6 (pattern-section)


State 50

   16 pattern-qualifiers: pattern-qualifier-list •  [$end, '/']
   18 pattern-qualifier-list: pattern-qualifier-list • pattern-qualifier
   20 pattern-qualifier: • '+' pattern-qualifier-parts
   21                  | • '~' pattern-qualifier-parts

    '~'  shift, and go to state 47
    '+'  shift, and go to state 48

    $default  reduce using rule 16 (pattern-qualifiers)

    pattern-qualifier  go to state 78


State 51

   19 pattern-qualifier-list: pattern-qualifier •

    $default  reduce using rule 19 (pattern-qualifier-list)


State 52

   65 escape: "character-escape" •

    $default  reduce using rule 65 (escape)


State 53

   66 escape: "hex-escape" •

    $default  reduce using rule 66 (escape)


State 54

   54 quoted-string-literal: '"' '"' •

    $default  reduce using rule 54 (quoted-string-literal)


State 55

   53 quoted-string-literal: '"' quoted-strparts • '"'
   55 quoted-strparts: quoted-strparts • quoted-strpart
   57 quoted-strpart: • unquoted-strpart
   58               | • escape
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   65 escape: • "character-escape"
   66       | • "hex-escape"
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '+'                 shift, and go to state 3
    UINTMAX8            shift, and go to state 4
    UINTMAX16           shift, and go to state 5
    INTMAX8             shift, and go to state 6
    INTMAX16            shift, and go to state 7
    "string"            shift, and go to state 8
    "character-escape"  shift, and go to state 52
    "hex-escape"        shift, and go to state 53
    '"'                 shift, and go to state 79
    'D'                 shift, and go to state 12

    quoted-strpart    go to state 80
    unquoted-strpart  go to state 57
    word              go to state 28
    word-tokens       go to state 29
    escape            go to state 58
    uint16            go to state 30


State 56

   56 quoted-strparts: quoted-strpart •

    $default  reduce using rule 56 (quoted-strparts)


State 57

   57 quoted-strpart: unquoted-strpart •

    $default  reduce using rule 57 (quoted-strpart)


State 58

   58 quoted-strpart: escape •

    $default  reduce using rule 58 (quoted-strpart)


State 59

    0 $accept: utterance $end •

    $default  accept


State 60

    3 pattern-sections-list: pattern-sections-list '/' • pattern-section
    5 pattern-section: • pattern-dentry-list
    6                | • "**" pattern-qualifiers
    7 pattern-dentry-list: • pattern-dentry pattern-qualifier-list
    8                    | • pattern-dentry
    9 pattern-dentry: • pattern-dentry-parts
   10 pattern-dentry-parts: • pattern-dentry-parts pattern-dentry-part
   11                     | • pattern-dentry-part
   12 pattern-dentry-part: • alternation
   13                    | • class
   14                    | • star
   15                    | • string-literal
   27 star: • '*'
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    "**"       shift, and go to state 9
    '*'        shift, and go to state 10
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    pattern-section          go to state 81
    pattern-dentry-list      go to state 17
    pattern-dentry           go to state 18
    pattern-dentry-parts     go to state 19
    pattern-dentry-part      go to state 20
    star                     go to state 21
    class                    go to state 22
    alternation              go to state 23
    string-literal           go to state 24
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30


State 61

    7 pattern-dentry-list: pattern-dentry pattern-qualifier-list •  [$end, '/']
   18 pattern-qualifier-list: pattern-qualifier-list • pattern-qualifier
   20 pattern-qualifier: • '+' pattern-qualifier-parts
   21                  | • '~' pattern-qualifier-parts

    '~'  shift, and go to state 47
    '+'  shift, and go to state 48

    $default  reduce using rule 7 (pattern-dentry-list)

    pattern-qualifier  go to state 78


State 62

   10 pattern-dentry-parts: pattern-dentry-parts pattern-dentry-part •

    $default  reduce using rule 10 (pattern-dentry-parts)


State 63

   38 alternation: '{' alternation-parts-without-epsilon '}' •

    $default  reduce using rule 38 (alternation)


State 64

   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon ',' • alternation-pattern
   41 alternation-parts-with-epsilon: alternation-parts-without-epsilon ',' • alternation-part-epsilon
   43 alternation-part-epsilon: • %empty  ['}']
   44 alternation-pattern: • alternation-pattern-parts
   45 alternation-pattern-parts: • alternation-pattern-parts alternation-pattern-part
   46                          | • alternation-pattern-part
   47 alternation-pattern-part: • alternation
   48                         | • class
   49                         | • string-literal
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    $default  reduce using rule 43 (alternation-part-epsilon)

    class                      go to state 31
    alternation                go to state 32
    alternation-part-epsilon   go to state 82
    alternation-pattern        go to state 83
    alternation-pattern-parts  go to state 37
    alternation-pattern-part   go to state 38
    string-literal             go to state 39
    unquoted-string-literal    go to state 25
    quoted-string-literal      go to state 26
    unquoted-strpart           go to state 27
    word                       go to state 28
    word-tokens                go to state 29
    uint16                     go to state 30


State 65

   37 alternation: '{' alternation-parts-with-epsilon '}' •

    $default  reduce using rule 37 (alternation)


State 66

   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   39 alternation-parts-without-epsilon: • alternation-parts-without-epsilon ',' alternation-pattern
   40                                  | • alternation-pattern
   42 alternation-parts-with-epsilon: alternation-part-epsilon ',' • alternation-parts-without-epsilon
   44 alternation-pattern: • alternation-pattern-parts
   45 alternation-pattern-parts: • alternation-pattern-parts alternation-pattern-part
   46                          | • alternation-pattern-part
   47 alternation-pattern-part: • alternation
   48                         | • class
   49                         | • string-literal
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    class                              go to state 31
    alternation                        go to state 32
    alternation-parts-without-epsilon  go to state 84
    alternation-pattern                go to state 36
    alternation-pattern-parts          go to state 37
    alternation-pattern-part           go to state 38
    string-literal                     go to state 39
    unquoted-string-literal            go to state 25
    quoted-string-literal              go to state 26
    unquoted-strpart                   go to state 27
    word                               go to state 28
    word-tokens                        go to state 29
    uint16                             go to state 30


State 67

   45 alternation-pattern-parts: alternation-pattern-parts alternation-pattern-part •

    $default  reduce using rule 45 (alternation-pattern-parts)


State 68

   35 class-range: CHAR '-' • CHAR

    CHAR  shift, and go to state 85


State 69

   29 class: '[' '!' class-parts • ']'
   30 class-parts: class-parts • class-pattern
   32 class-pattern: • class-part
   33 class-part: • class-range
   34           | • class-char
   35 class-range: • CHAR '-' CHAR
   36 class-char: • CHAR

    ']'   shift, and go to state 86
    CHAR  shift, and go to state 40

    class-pattern  go to state 71
    class-part     go to state 44
    class-range    go to state 45
    class-char     go to state 46


State 70

   28 class: '[' class-parts ']' •

    $default  reduce using rule 28 (class)


State 71

   30 class-parts: class-parts class-pattern •

    $default  reduce using rule 30 (class-parts)


State 72

   21 pattern-qualifier: '~' pattern-qualifier-parts •  [$end, '~', '+', '/']
   22 pattern-qualifier-parts: pattern-qualifier-parts • pattern-qualifier-part
   24 pattern-qualifier-part: • alternation
   25                       | • class
   26                       | • string-literal
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    '+'       [reduce using rule 21 (pattern-qualifier)]
    $default  reduce using rule 21 (pattern-qualifier)

    pattern-qualifier-part   go to state 87
    class                    go to state 74
    alternation              go to state 75
    string-literal           go to state 76
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30

    shift/reduce conflict on token '+':
       21 pattern-qualifier: '~' pattern-qualifier-parts •
       64 word-tokens: • '+'
      Example: '~' pattern-qualifier-parts • '+' pattern-qualifier-part
      Shift derivation
        pattern-qualifier-list
        ↳ pattern-qualifier
          ↳ '~' pattern-qualifier-parts
                ↳ pattern-qualifier-parts                               pattern-qualifier-part
                  ↳ pattern-qualifier-parts pattern-qualifier-part
                                            ↳ string-literal
                                              ↳ unquoted-string-literal
                                                ↳ unquoted-strpart
                                                  ↳ word
                                                    ↳ word-tokens
                                                      ↳ • '+'
      Example: '~' pattern-qualifier-parts • '+' pattern-qualifier-part
      Reduce derivation
        pattern-qualifier-list
        ↳ pattern-qualifier-list            pattern-qualifier
          ↳ pattern-qualifier               ↳ '+' pattern-qualifier-parts
            ↳ '~' pattern-qualifier-parts •       ↳ pattern-qualifier-part



State 73

   23 pattern-qualifier-parts: pattern-qualifier-part •

    $default  reduce using rule 23 (pattern-qualifier-parts)


State 74

   25 pattern-qualifier-part: class •

    $default  reduce using rule 25 (pattern-qualifier-part)


State 75

   24 pattern-qualifier-part: alternation •

    $default  reduce using rule 24 (pattern-qualifier-part)


State 76

   26 pattern-qualifier-part: string-literal •

    $default  reduce using rule 26 (pattern-qualifier-part)


State 77

   20 pattern-qualifier: '+' pattern-qualifier-parts •  [$end, '~', '+', '/']
   22 pattern-qualifier-parts: pattern-qualifier-parts • pattern-qualifier-part
   24 pattern-qualifier-part: • alternation
   25                       | • class
   26                       | • string-literal
   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    '+'       [reduce using rule 20 (pattern-qualifier)]
    $default  reduce using rule 20 (pattern-qualifier)

    pattern-qualifier-part   go to state 87
    class                    go to state 74
    alternation              go to state 75
    string-literal           go to state 76
    unquoted-string-literal  go to state 25
    quoted-string-literal    go to state 26
    unquoted-strpart         go to state 27
    word                     go to state 28
    word-tokens              go to state 29
    uint16                   go to state 30

    shift/reduce conflict on token '+':
       20 pattern-qualifier: '+' pattern-qualifier-parts •
       64 word-tokens: • '+'
      Example: '+' pattern-qualifier-parts • '+' pattern-qualifier-part
      Shift derivation
        pattern-qualifier-list
        ↳ pattern-qualifier
          ↳ '+' pattern-qualifier-parts
                ↳ pattern-qualifier-parts                               pattern-qualifier-part
                  ↳ pattern-qualifier-parts pattern-qualifier-part
                                            ↳ string-literal
                                              ↳ unquoted-string-literal
                                                ↳ unquoted-strpart
                                                  ↳ word
                                                    ↳ word-tokens
                                                      ↳ • '+'
      Example: '+' pattern-qualifier-parts • '+' pattern-qualifier-part
      Reduce derivation
        pattern-qualifier-list
        ↳ pattern-qualifier-list            pattern-qualifier
          ↳ pattern-qualifier               ↳ '+' pattern-qualifier-parts
            ↳ '+' pattern-qualifier-parts •       ↳ pattern-qualifier-part



State 78

   18 pattern-qualifier-list: pattern-qualifier-list pattern-qualifier •

    $default  reduce using rule 18 (pattern-qualifier-list)


State 79

   53 quoted-string-literal: '"' quoted-strparts '"' •

    $default  reduce using rule 53 (quoted-string-literal)


State 80

   55 quoted-strparts: quoted-strparts quoted-strpart •

    $default  reduce using rule 55 (quoted-strparts)


State 81

    3 pattern-sections-list: pattern-sections-list '/' pattern-section •

    $default  reduce using rule 3 (pattern-sections-list)


State 82

   41 alternation-parts-with-epsilon: alternation-parts-without-epsilon ',' alternation-part-epsilon •

    $default  reduce using rule 41 (alternation-parts-with-epsilon)


State 83

   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon ',' alternation-pattern •

    $default  reduce using rule 39 (alternation-parts-without-epsilon)


State 84

   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon • ',' alternation-pattern
   42 alternation-parts-with-epsilon: alternation-part-epsilon ',' alternation-parts-without-epsilon •  ['}']

    ','  shift, and go to state 88

    $default  reduce using rule 42 (alternation-parts-with-epsilon)


State 85

   35 class-range: CHAR '-' CHAR •

    $default  reduce using rule 35 (class-range)


State 86

   29 class: '[' '!' class-parts ']' •

    $default  reduce using rule 29 (class)


State 87

   22 pattern-qualifier-parts: pattern-qualifier-parts pattern-qualifier-part •

    $default  reduce using rule 22 (pattern-qualifier-parts)


State 88

   28 class: • '[' class-parts ']'
   29      | • '[' '!' class-parts ']'
   37 alternation: • '{' alternation-parts-with-epsilon '}'
   38            | • '{' alternation-parts-without-epsilon '}'
   39 alternation-parts-without-epsilon: alternation-parts-without-epsilon ',' • alternation-pattern
   44 alternation-pattern: • alternation-pattern-parts
   45 alternation-pattern-parts: • alternation-pattern-parts alternation-pattern-part
   46                          | • alternation-pattern-part
   47 alternation-pattern-part: • alternation
   48                         | • class
   49                         | • string-literal
   50 string-literal: • unquoted-string-literal
   51               | • quoted-string-literal
   52 unquoted-string-literal: • unquoted-strpart
   53 quoted-string-literal: • '"' quoted-strparts '"'
   54                      | • '"' '"'
   59 unquoted-strpart: • word
   60 word: • word-tokens
   61     | • uint16
   62 word-tokens: • "string"
   63            | • 'D'
   64            | • '+'
   67 uint16: • INTMAX8
   68       | • INTMAX16
   69       | • UINTMAX8
   70       | • UINTMAX16

    '{'        shift, and go to state 1
    '['        shift, and go to state 2
    '+'        shift, and go to state 3
    UINTMAX8   shift, and go to state 4
    UINTMAX16  shift, and go to state 5
    INTMAX8    shift, and go to state 6
    INTMAX16   shift, and go to state 7
    "string"   shift, and go to state 8
    '"'        shift, and go to state 11
    'D'        shift, and go to state 12

    class                      go to state 31
    alternation                go to state 32
    alternation-pattern        go to state 83
    alternation-pattern-parts  go to state 37
    alternation-pattern-part   go to state 38
    string-literal             go to state 39
    unquoted-string-literal    go to state 25
    quoted-string-literal      go to state 26
    unquoted-strpart           go to state 27
    word                       go to state 28
    word-tokens                go to state 29
    uint16                     go to state 30
