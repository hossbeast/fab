'\"
.\" Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>
.\"
.\" This file is part of fab.
.\" 
.\" fab is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\" 
.\" fab is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with fab.  If not, see <http://www.gnu.org/licenses/>. */
.\"
.de URL
\\$2 \(laURL: \\$1 \(ra\\$3
..
.if \n[.g] .mso www.tmac
.TH FAB 1 "---BUILDDATE---" "fab----BUILDVERS---" "Fab Manual"
.
.SH NAME
fab \- build optimally
.SH SYNOPSIS
.B fab
.R [
.I "modifier"
.R |
.I "selector"
.R |
.I option
.R |
.I logexpr
.R |
.I varexpr
.R ] ...
.PP
.B fab --help
: options summary
.br
.B fab --version
: version information
.br
.B fab --logs
: summary of logging options
.br
.B fab --ops
: \fBlistwise(3)\fR operator listing, including \fBfab\fR-specific operators
.SH DESCRIPTION
.B fab
is used to manage compilation of a project, where source files are transformed into build artifacts by executing a series of commands.
.PP
The project is represented by a dependency graph in which each node represents either a source file or a secondary file. There are also nodes that are not backed by any file, so-called nofile nodes, that represent build tasks
.RB "(ex. " "@install" )
or groups of nodes
.RB "(ex. " "@all" )
.PP
Parsing the project files and constructing the dependency graph is expensive.
.B fabd
is a caching daemon that runs in the background per project, to maintain those structures in memory. Incremental builds are fast.
.PP
.B fab
features integrated dependency discovery to ease the burden of specifying dependencies between project components.
.PP
The build is shaped by selecting nodes into node-sets on the command line. Each node-set has a specific function, see below.
.SH SELECTIONS
.SS "SELECTORS"
.PP
.TP
.I path
select by relative path
.TP
.BI / path
select by canonical path
.TP
.BI @ name
select by nofile name
.TP
\fB[ \fIlist \fR[\fB ~ \fItransform-string \fR] \fB]
list selection (see EXAMPLES below)
.br
variables
.br
.B $!
: all nodes
.SS "RESOLUTION MODIFIERS"
.TP
\fB+C\fR|\fB-C\fR (default)
relative path selectors resolve against current working directory (default)
.TP
\fB+F\fR|\fB-F\fR
relative path selectors resolve against directory in which the init-fabfile resides
.SS "SELECTION MODIFIERS"
.TP
\fB+t\fR|\fB-t\fR fabricate-set (default)
add nodes to the build plan along with their eventual dependencies
.TP
\fB+x\fR|\fB-x\fR fabricate-exact-set 
add nodes to the buildplan without considering dependencies
.TP
\fB+n\fR|\fB-n\fR fabricate-nofile-set 
add nodes to the buildplan along with their eventual dependencies without traversing a nofile boundary
.TP
\fB+b\fR|\fB-b\fR invalidate-set 
invalidate nodes
.SS "NON-BUILD NODE-SETS"
If any of the following node-sets is nonempty, the associated actions are performed instead of buildplan creation/execution
.TP
\fB+d\fR|\fB-d\fR discovery-set 
perform dependency discovery for nodes
.TP
\fB+i\fR|\fB-i\fR inspect-set 
output summary information for nodes
.TP
\fB+q\fR|\fB-q\fR query-set 
list the nodes matched by selectors
.RS
.SH OPTIONS
.SS "Execution Modes"
.TP
.BR \-p 
create buildplan only - do not execute buildplan. Implies \fB+BPDUMP\fP.
.
.SS "Incremental Builds"
.TP
.BR \-B
first restart \fBfabd\fP. Consider using +b [ $! ] instead.
.
.SS "Parallel Builds"
.TP
\fB\-j\fR \fIconcurrency\fR
maximum number of simultaneously executing threads
.RS
.TP
.B -1
limit to heuristic based on detected CPUs (default)
.TP
.B 0
no limit
.TP
.I number
.R limit to
.I number
.
.SS "Buildscripts"
.TP
\fB\-k\fR \fIpath\fR
do not execute buildplan - instead create a buildscript from it, and write it to \fIpath\fP
.TP
\fB-K\fR \fIvarname\fR
\fIvarname\fP will be settable at buildscript execution time
.SS "Fabfile Processing"
.TP
\fB-f\fR \fIpath\fR
locate the initial fabfile at \fIpath\fR rather than ./fabfile
.TP
\fB-I\fR \fIpath\fR
append \fIpath\fP to the list of directories used when resolving invocations
.SS "Variables"
The portion of the option following \fB-v\fP is referred to as the \fIvarexpr\fP. Implies -B.
.TP
\fB-v $\fIvar\fB=[ \fIlist \fR[ \fB~ \fItransform-string \fR ] \fB]
apply the specified list to the definition of \fIvar\fP at scope-zero
.TP
\fB-v $\fIvar\fB+=[ \fIlist \fR [ \fB~ \fItransform-string\fR ] \fB]
apply the specified list addition to the definition of \fIvar\fP at scope-zero
.TP
\fB-v $\fIvar\fB~=\fItransform-string\fP
apply \fItransform-string\fP to the definition of \fIvar\fP at scope-zero
.SS "Handling Cycles"
.TP
.BR \--cycles-warn " (default)"
warn when a cycle is detected (once per unique cycle)
.TP
.BR \--cycles-fail
fail when a cycle is detected
.TP
.BR \--cycles-deal
deal with cycles by terminating the traversal (not recommended)
.SS "Logging"
.TP
.BR \--gnid-relative-cwd " (default)"
identify nodes in log messages by path relative to the current working directory
.TP
.BR \--gnid-relative-fabfile-dir
identify nodes in log messages by path relative to init-fabfile-dir
.TP
.BR \--gnid-absolute
identify nodes in log messages by absolute path
.TP
.BR \--gnid-canon
identify nodes in log messages by canonical path
.
.SH LOGEXPR
Log expressions control which log messages are enabled
.TP
 \fB+\fR\fIlogcat
enable log messages tagged with the category \fIlogcat
.TP
 \fB-\fR\fIlogcat
disable log messages tagged with the category \fIlogcat
.SS Categories
.TP
.BR ERROR
fatal errors
.TP
.BR WARN
nonfatal warnings
.TP
.BR INFO
program flow
.TP
.BR ARGS
program arguments
.TP
.BR PARAMS
program execution parameters
.TP
.BR BPINFO
buildplan - flow
.TP
.BR BPEXEC
buildplan - execution
.TP
.BR BPEVAL
buildplan - pruning/evaluating
.TP
.BR BPDUMP
buildplan - log final buildplan
.TP
.BR BPCMD
buildplan - commands
.TP
.BR DSCINFO
dependency discovery - flow
.TP
.BR DSCEXEC
dependency discovery - execution
.TP
.BR DSCCMD
dependency discovery - commands
.TP
.BR DSCRES
dependency discovery - results
.TP
.BR NODE
dependency graph node details (+i)
.TP
.BR INVALID
dependency graph node invalidations
.TP
.BR VARAUTO
variable definitions - automatic
.TP
.BR VARUSER
variable definitions - user-defined
.TP
.BR VAR
variable definitions
.TP
.BR INVOKE
fabfile invocations
.TP
.BR SELECT
node selectors
.TP
.BR LISTS
node lists
.
.SH EXIT STATUS
An exit status of 0 means success.
.PP
An exit status > 127 means an error was encountered that is not specific to
.BR fab .
.PP
An exit status < 128 means that one of the following \fBfab\fP-specific error was encountered.
.TP
.RB (1) BADARGS
invalid command-line arguments
.TP
.RB (2) BADTMP
unexpected file(s) in fab tmp directory
.TP
.RB (3) BADIPC
ipc failure
.TP
.RB (4) SYNTAX
fabfile could not be parsed
.TP
.RB (5) ILLBYTE
fabfile contains illegal byte(s)
.TP
.RB (6) UNSATISFIED
buildplan has unsatisfied dependencies
.TP
.RB (7) CMDFAIL
command failed to execute successfully
.TP
.RB (8) DSCPARSE
dependency discovery results were not parsed
.TP
.RB (9) NOINVOKE
invocation target could not be resolved
.TP
.RB (10) BADPLAN
buildplan cannot be constructed
.TP
.RB (11) CYCLE
dependency graph contains a cycle
.TP
.RB (12) NOSELECT
selector matches nothing
.TP
.RB (13) NXPARAMS
unable to determine runtime parameters
.TP
.RB (14) FABDFAIL
fabd terminated abnormally
.TP
.RB (15) FABPERMS
fab binar(ies) do not have proper permissions
.SH AUTHORS
Todd Freed 
.MT todd.freed@gmail.com
.ME
.SH "SEE ALSO"
.BR listwise(1)
.BR listwise(3)
.PP
.URL "http://fabutil.org" "fabutil.org"
