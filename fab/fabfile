/* Copyright (c) 2012-2013 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# definitions
$dcommon = [ $*/../common ~ j ]
+[ $dcommon/vars.fab ]

# source invocations
+[ $dcommon ] @common

# variables
$cflags					= [ $cflags	-fno-builtin-log [ $dfab ~ lsr c -d s/^/-I ]
/*
	[ -DFABVERSIONS="\""$VERSIONS"\"" ~ j ]
	[ -DFABVERSIONN="\""$VERSIONN"\"" ~ j ]
	[ -DFABCACHEDIR="\""$fabcachedir"\"" ~ j ]
	[ -DFABTMPDIR="\""$fabtmpdir"\"" ~ j ]
	[ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ]
	[ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ]
*/

	[ ~ [ ?, [ cons,-DLFABVERSIONS="$VERSIONS" ~ j ] ~ fi ] ]
	[ ~ [ ?, [ cons,-DLFABVERSIONN="$VERSIONN" ~ j ] ~ fi ] ]
	[ ~ [ ?, [ cons,-DFABCACHEDIR="$fabcachedir" ~ j ] ~ fi ] ]
	[ ~ [ ?, [ cons,-DFABTMPDIR="$fabtmpdir" ~ j ] ~ fi ] ]
	[ ~ [ ?, [ cons,-DFABLWOPDIR="$fablwopdir" ~ j ] ~ fi ] ]
	[ ~ [ ?, [ cons,-DFABINVOKEDIR="$fabinvokedir" ~ j ] ~ fi ] ]
	[ ~ ?{ cons{-DBUILDSTAMP="`date`"} ]
]
$lflags					= [ $lflags $libxapi $libxlinux $libpstring $liblistwise ]
$fab						= [ $dfab/fab ~ j ]

# standard files - standard compilation
+[@std.c]($gendir = $dfab; $rdirs = [ $dfab ~ ls -d v d m/fablw d ]; $paths = [ $dfab/main.c ~ j ]; $cc $cflags)
+[@std.l]($gendir = $dfab; $rdirs = [ $dfab ~ ls/-d v d m/fablw d ]; $cc $cflags $flex $flexflags)
#+[@std.y]($gendir = $dfab; $rdirs = [ $dfab ~ ls/-d/v/d/m/fablw/d ]; $cc $cflags $bison $bisonflags)
+[@std.bison.rules]($gendir = $dfab; $dirs = [ $dfab/ff ~ j ]; $cc $cflags $bison $bisonflags)

# standard files - fPIC compilation
#  no discovery on these files, because they would then depend on *.pic.o files within fab which
#  do not exist ; instead those link-time references are satisfied by the fab executable
#
+[@std.c]($gendir = $dfab; $rfabdirs = [ $dfab/fablw ~ j ]; $ext = [ pic.o ]; $cflags = [ $cflags -fPIC ]; $cc)

# generated files
+[@std.flex.states] ($gendir = $dfab; $rdirs = $dfab; $cc $cflags)
+[@std.bison.tokens]($gendir = $dfab; $rdirs = $dfab; $cc $cflags)
+[@std.xapi.errtab] ($gendir = $dfab; $rdirs = $dfab; $cc $cflags)

# operator so's
$faboplist = [ $dfab/fablw/op ~ j lsr sx/c/so y ]

#
# catchall node
#
[ @all ] : [ $fab @oplist ]

# target for building all operators
[ @oplist ] : [ $faboplist ]

#
# executables
#  -export-dynamic enables dloaded code (in particular, the fab-specific operator so's) to bind to symbols in the executable.
#
[ $fab ] : [ $dfab/main.o ~ j ] 
{
	[ $cc ] [ $cflags -export-dynamic ~ uu fi ] -o [ $@ ] [ $@ ~ rx/aneedw rx lx/o uu fi ] [ $lflags ~ fi ]
}

#
# fab-specific operator so's - only link the immediate object. This so depends on fab for many symbols
#
[ $faboplist ~ dj shift ] :: [ $< ~ rx sx/pic.o ]
{
	  [ $cc ] [ $cflags ~ uu fi ] -o [ $@ ]	[ $@ ~ rx/ineed fi ] [
	] -shared [ "-Wl,-soname," [ $@ ~ rx bn ] ]
}

# also a bridge dependency on the fab executable
[ $dfab/fablw/op ~ j lsr sx/c/pic.o y ] ::^ [ $fab ]

#
# tasks
#

[ @install ] : [ @all ]
{
	chown fabsys:fabsys		[ $fab ]
	chmod u+s 						[ $fab ]
	chmod g+s 						[ $fab ]
	install -d																			[ $destdir/$bindir ]
	install [ $fab ]																[ $destdir/$bindir ]
	install [ $dfab/gcc-dep]												[ $destdir/$bindir ]
	install -d 																			[ $destdir/$fabcachedir ]
	chown fabsys:fabsys															[ $destdir/$fabcachedir ]
	install -d 																			[ $destdir/$fabtmpdir ]
	chown fabsys:fabsys															[ $destdir/$fabtmpdir ]
	install -d 																			[ $destdir/$fabipcdir ]
	chown fabsys:fabsys															[ $destdir/$fabipcdir ]
	install -d																			[ $destdir/$fabinvokedir/std ]
	install -d																			[ $destdir/$fabinvokedir/std/c ]
	install -d																			[ $destdir/$fabinvokedir/std/l ]
	install -d																			[ $destdir/$fabinvokedir/std/y ]
	install -d																			[ $destdir/$fabinvokedir/std/flex ]
	install -d																			[ $destdir/$fabinvokedir/std/bison ]
	install [ $dfab/fablib/std/c.fab ]							[ $destdir/$fabinvokedir/std/c.fab ]
	install [ $dfab/fablib/std/l.fab ]							[ $destdir/$fabinvokedir/std/l.fab ]
	install [ $dfab/fablib/std/y.fab ]							[ $destdir/$fabinvokedir/std/y.fab ]
	install [ $dfab/fablib/std/flex/states.fab ]		[ $destdir/$fabinvokedir/std/flex/states.fab ]
	install [ $dfab/fablib/std/bison/tokens.fab ]		[ $destdir/$fabinvokedir/std/bison/tokens.fab ]
  

	rm -rf 																					[ $destdir/$fablwopdir ] 2>/dev/null
	install -d																			[ $destdir/$fablwopdir ]
	install [ $dfab/fablw/op/fi/fi.so ]							[ $destdir/$fablwopdir ]
	install [ $dfab/fablw/op/fg/fg.so ]							[ $destdir/$fablwopdir ]
}

[ @installman ] : [ @installman1 ]
[ @installman1 ] : [ $dfab/man/fab.1 ~ j ]
{
	install -d 																			[ $destdir/$mandir/man1 ]

	cat [ $dfab/man/fab.1 ] \
		| lw "s/---BUILDVERS---/<[ $VERSIONS ]>" \
		| lw "s/---BUILDDATE---/<[ @^.time ~ datef/%Y-%m-%d ]>" \
		| gzip -9c  																		> [ $destdir/$mandir/man1/fab.1.gz ]
}
