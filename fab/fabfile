/* Copyright (c) 2012-2013 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# source directories
$dfab						= [ $* ]
$dcommon				= [ $dfab/../common ~ j ]
$dliblistwise		= [ $dfab/../liblistwise ~ j ]
$dxapi					= [ $dfab/../xapi ~ j ]
$dlibxlinux			= [ $dfab/../libxlinux ~ j ]

# variable defs, $cc, $cflags, etc
# common targets xmem, map, etc
+[ $dcommon/vars.fab ]
+[ $dcommon ]() @common

# variables
$cflags					= [ $cflags	-fno-builtin-log [ $dfab $dcommon $dliblistwise $dlibxlinux $dxapi ~ lsr/c/-d/s/^/-I ]
	[ -DFABVERSIONS="\""$VERSIONS"\"" ~ j ]
	[ -DFABVERSIONN="\""$VERSIONN"\"" ~ j ]
	[ -DFABCACHEDIR="\""$fabcachedir"\"" ~ j ]
	[ -DFABTMPDIR="\""$fabtmpdir"\"" ~ j ]
	[ -DFABLWOPDIR="\""$fablwopdir"\"" ~ j ]
	[ -DFABINVOKEDIR="\""$fabinvokedir"\"" ~ j ]
]
$lflags					= [ $lflags $libxapi $liblistwise $libxlinux ]
$fab						= [ $dfab/fab ~ j ]

# standard files - standard compilation
+[@std.c]($gendir = $dfab; $rdirs = [ $dfab ~ ls/-d/v/d/m/fablw/d ]; $paths = [ $dfab/main.c ~ j ]; $cc $cflags)
+[@std.l]($gendir = $dfab; $rdirs = [ $dfab ~ ls/-d/v/d/m/fablw/d ]; $cc $cflags $flex $flexflags)
+[@std.y]($gendir = $dfab; $rdirs = [ $dfab ~ ls/-d/v/d/m/fablw/d ]; $cc $cflags $bison $bisonflags)

# standard files - fPIC compilation
+[@std.c]($gendir = $dfab; $rfabdirs = [ $dfab/fablw ~ j ]; $ext = [ pic.o ]; $cflags = [ $cflags -fPIC ]; $cc)

# generated files
+[@std.flex.states] ($gendir = $dfab; $rdirs = $dfab; $cc $cflags)
+[@std.bison.tokens]($gendir = $dfab; $rdirs = $dfab; $cc $cflags)
+[@std.xapi.errtab] ($gendir = $dfab; $dirs = $dfab; $cc $cflags)

# operator so's
$faboplist = [ $dfab/fablw/op ~ j/lsr/xs/<c>/<so>/y ]

#
# catchall node
#
[ @all ] : [ $fab @oplist ]

# target for building all operators
[ @oplist ] : [ $faboplist ]

#
# executables
#  -export-dynamic enables dloaded code (in particular, the fab-specific operator so's) to bind to symbols in the executable.
#
[ $fab ] : [ $dfab/main.o ~ j ] 
{
	[ $cc ] [ $cflags -export-dynamic ~ uu/fi ] -o [ $@ ] [ $@ ~ rx/aneedw/rx/xm/<o>/uu/fi ] [ $lflags ~ fi ]
}

#
# fab-specific operator so's
#
[ $faboplist ~ dj/shift ] :: [ $< ~ rx/xs/<pic.o> ]
{
	  [ $cc ] [ $cflags ~ uu/fi ] -o [ $@ ]	[ $@ ~ rx/aneedw/rx/xm/<o>/uu/fi ] [
	] [ $liblistwise ] -shared [ "-Wl,-soname," [ $@ ~ rx/bn ] ]
}

#
# tasks
#

[ @install ] : [ @all ]
{
	chown fabsys:fabsys		[ $fab ]
	chmod u+s 						[ $fab ]
	chmod g+s 						[ $fab ]
	install -d															[ $destdir/$bindir ]
	install [ $fab ]												[ $destdir/$bindir ]
	install [ $dfab/gcc-dep]								[ $destdir/$bindir ]
	install -d 															[ $destdir/$fabcachedir ]
	chown fabsys:fabsys											[ $destdir/$fabcachedir ]
	install -d 															[ $destdir/$fabtmpdir ]
	chown fabsys:fabsys											[ $destdir/$fabtmpdir ]
	install -d 															[ $destdir/$fabipcdir ]
	chown fabsys:fabsys											[ $destdir/$fabipcdir ]
	install -d															[ $destdir/$fabinvokedir/std ]
	install -d															[ $destdir/$fabinvokedir/std/c ]
	install -d															[ $destdir/$fabinvokedir/std/l ]
	install -d															[ $destdir/$fabinvokedir/std/y ]
	install [ $dfab/fablib/std/c.fab ]			[ $destdir/$fabinvokedir/std/c.fab ]
	install [ $dfab/fablib/std/l.fab ]			[ $destdir/$fabinvokedir/std/l.fab ]
	install [ $dfab/fablib/std/y.fab ]			[ $destdir/$fabinvokedir/std/y.fab ]

	rm -rf 																	[ $destdir/$fablwopdir ] 2>/dev/null
	install -d															[ $destdir/$fablwopdir ]
	install [ $dfab/fablw/op/fi/fi.so ]			[ $destdir/$fablwopdir ]
	install [ $dfab/fablw/op/fg/fg.so ]			[ $destdir/$fablwopdir ]
}

[ @uninstall ]
{
	rm -f																		[ $destdir/$bindir/fab ]
	rm -f																		[ $destdir/$bindir/gcc-dep ]
	rm -rf																	[ $destdir/$fabcachedir ]
	rm -rf																	[ $destdir/$fabtmpdir ]
	rm -rf																	[ $destdir/$fabinvokedir ]
}

[ @clean ] :* [ @common.clean ]
{
	find [ $dfab ] -name '*.o' -delete 2>/dev/null
	find [ $dfab ] -name '*.so' -delete 2>/dev/null
	find [ $dfab ] -name '*.lex.*' -delete 2>/dev/null
	find [ $dfab ] -name '*.tab.*' -delete 2>/dev/null
	find [ $dfab ] -name '*.tokens.*' -delete 2>/dev/null
	find [ $dfab ] -name '*.states.*' -delete 2>/dev/null
	rm -f [ $fab ] 2>/dev/null
}
