#!/usr/bin/env perl
#
# Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>
#
# This file is part of fab.
#
# fab is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fab.  If not, see <http://www.gnu.org/licenses/>. */
#

use strict;
use warnings;
$SIG{__WARN__} = sub { die @_ };

use POSIX;
use Data::Dumper;

die "git not found" unless $ENV{git};

#
# runs a git command and returns the stdout as a single scalar
#
sub git
{
  my @cmd = @_;
  unshift @cmd, $ENV{git};

  my ($rdout, $wrout) = POSIX::pipe();

  if(fork == 0)
  {
    POSIX::close(0);
    POSIX::open("/dev/null", O_RDONLY);

    POSIX::close($rdout);
    POSIX::dup2($wrout, 1);

    exec { $cmd[0] } @cmd;
  }

  POSIX::close($wrout);

  my $stdout = '';
  while(1)
  {
    my $data;
    my $rv = POSIX::read($rdout, $data, 0xffff);
    $stdout .= $data;
    last if $rv == 0;
    die "read $rdout : $rv : $!" if $rv < 0;
  }
  POSIX::close($rdout);
  chomp $stdout;

  wait;
  my $exit = $?;
  die "failed : exit " . ($exit >> 8) . " : @cmd" if $exit >> 8;
  die "failed : signal " . ($exit & 127) . " : @cmd" if $exit & 127;

  $stdout;
}

my $cfile = substr($ENV{bm_target0}, -2) eq ".c" ? $ENV{bm_target0} : $ENV{bm_target1};
my $hfile = substr($ENV{bm_target0}, -2) eq ".h" ? $ENV{bm_target0} : $ENV{bm_target1};

$ENV{TZ} = 'UTC';
my $describe = git(qw|describe --dirty --abbrev=16|);

my $fmt = "commit %H";
$fmt .= "%n%GG";
$fmt .= "Author       %an <%ae>";
$fmt .= "%nAuthorDate   %ai";
$fmt .= "%nCommit       %cn <%ce>";
$fmt .= "%nCommitDate   %ci";
$fmt .= "%n%n%w(0,4,4)%s";
$fmt .= "%n%n%w(0,4,4)%b";

my @cmd = ("show", "--quiet", "--expand-tabs", "--pretty=format:$fmt");
my $metadata = git(@cmd);

# c string literal encoding
$metadata =~ s/"/""\\x22""/g;
$metadata =~ s/\n/""\\x0a""/g;

open my $fh, ">$hfile" or die $!;
print $fh <<END;
#ifndef __GENERATED_GIT_STATE_H
#define __GENERATED_GIT_STATE_H

// git describe --dirty --abbrev=16
extern const char git_describe[];

// extended git metadata
extern const char git_metadata[];

#endif
END
close $fh;

open $fh, ">$cfile" or die $!;
print $fh <<END;
#include "$hfile"

const char git_describe[] = { "$describe" };
const char git_metadata[] = { "$metadata" };
END

__DATA__

envs : {
  git : {
    path-search : git
  }
}
