generator-variables : reusable list transformation components
	you get this with evalled generator strings - possibly more elegant way?

set operations ?? 

[ a b ] U [ b c ] = [ a b c ]
[ a b ] I [ b c ] = [ b ]

# generator-string variables, and composition from variables
# content signatures
# better help output, logging category explanations

# tagging of items in fabfile for logging - the tagging is done with per-node ( x:y ) settings
  per-node settings ( x:y, x:y )
		invalidate this node

dump individual VAR-sets by name
dump individual formulas by node-name
dump discovery results by node-name

# PERSISTENT FAB DAEMON FOR A GIVEN TARGET
	given a target, establishes inotify watches on all relevant nodes
	given any changes, performs builds necessary to reconstruct the target
	outputs say a 10-line HUD view of current activity
		suitable for tailing - it emits say 10 newlines between views
	you can query the FABD for dumping node information it knows about
	affecting fabfile changes - equivalent to restarting the daemon

# autovar documentation
$@, ${products} - products of the current formula
$<, ${lhs}      - lefthand side of a multi-product formula
$#, ${initdir}  - relative path to the directory containing the master fabfile
$*, ${thisdir}	- relative path to the directory containing the current fabfile

$# - master fabfile
$* - current fabfile

fabfile properties
	path [default] (relative)
	name
	dir (relative)
	ext
	cnt - number of times invoked

expose canons other modes as listwise operators

# done
- command line variable defs : immutably set the value of the variable, which cannot be
                               modified in a lower scope - cmdline is scope 0

- file-node change should be propagated by creation of FORCE files in directories
  of nodes that are affected, and then their hashes committed
- list syntax for interpolation with spaces [ a, b ], and with no spaces [ a b ]
- evalled generator-strings

# NEED
option for nofile nodes in invocations to be just ignored
command line variable defs : "append this" anytime the variable is rendered/resolved
sadly - if blocks and looping constructs are needed
  do-not-invoke depending on how invocation string is referenced - reworked
	include guards
default target - invoke in same NOFILE-context can become default target
VARLINK between different names
