# includes
	two kinds
	reusable
		bindings
	include guards

# pre-installed reusable >> includes
	generator-variables : reusable list transformation components
	

when you include a .fab, you supply 0+ variable bindings. this creates a binding context object
which is available inside the .fab and can be read from


# generator-string variables, and composition from variables
# content signatures
# better help output, logging category explanations
# fabfile syntax : terminating comments /* */

# tagging of items in fabfile for logging - the tagging is done with per-node ( x:y ) settings
  per-node settings ( x:y, x:y )
		invalidate this node
		dump individual VAR-sets by name
		dump individual formulas by node-name



# dump/invalidate/target node identification standardization
   text   : shorthand for append to init-fabfile-rel-dir, relative path exact match
	/text/  : regex match on abs/can/rel paths, returns list
	<text>  : canonical path match, returns single item
	.text   : shorthand for nofile, equivalent to canonical path match

# PERSISTENT FAB DAEMON FOR A GIVEN TARGET
	given a target, establishes inotify watches on all relevant nodes
	given any changes, performs builds necessary to reconstruct the target
	outputs say a 10-line HUD view of current activity
		suitable for tailing - it emits say 10 newlines between views
	you can query the FABD for dumping node information it knows about
	affecting fabfile changes - equivalent to restarting the daemon

# autovar documentation
$@, ${products} - products of the current formula
$<, ${lhs}      - lefthand side of a multi-product formula
$#, ${base}     - relative path to the directory containing the master fabfile


should've held my ground


				I could've been redeemed
