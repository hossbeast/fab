# l.fab
#  provides discovery formula for .l files
#  provides fabrication formula for .lex.c -> .lex.o
#  provides dependencies for lex.o -> .l

# var/closure
#  cc
#  cflags 
#  flex
#  flexflags
#
#  dirs       - directories containing .l files
#  rdirs      - directories containing .l files, recursive search
#  paths      - paths to .l files
#
#  discdirs   - (as above, but for discovery only)
#  discrdirs  - 
#  discpaths  - 
#
#  fabdirs    - (as above, but for fabrication/dependency only)
#  fabrdirs   - 
#  fabpaths   - 
#

# paths to l files for discovery
$ldscpaths = [
	$paths				# paths
	$dscpaths			# paths, discovery only

	[
		$dirs				# directories
		$dscdirs		# directories, discovery only
	] =>> ls

	[
		$rdirs			# recursive directories
		$rdscdirs		# recursive directories, discovery only
	] =>> lsr
] =>> xm/<l>

# paths to l files for fabrication
$lfabpaths = [
	$paths				# paths
	$dscpaths			# paths, discovery only

	[
		$dirs				# directories
		$dscdirs		# directories, discovery only
	] =>> ls

	[
		$rdirs			# recursive directories
		$rdscdirs		# recursive directories, discovery only
	] =>> lsr
] =>> xm/<l>

# discovery
[ $ldscpaths ] ~
{
	[ $flex $flexflags -t $@ ] | [ $cc $cflags ] -MM -MP -MG -xc - | gcc-dep [ $@ ] =>> rx/xs/<l>/lex.o
}

# $flex : l -> { lex.c, lex.h }
[ $lfabpaths ] =>> xs/<l>/lex.c/y/v/d/cp/u/xs/lex.c/lex.h/z/v/dj/2/shift/pop :: [ $< ] =>> rx/xsf/<l>/ss/u
{
	[ $flex $flexflags -o [ $@ ] =>> h/1/1/rx ]				\
	[ --header-file= [ $@ ] =>> h/0/1/rx ] =>> j			\
	[ $@ ] =>> rx/ineed/xm/<l>/ss/u
}

# $cc : lex.c -> lex.o via std.c
+[@std.c]([ $lfabpaths ] =>> xs/<l>/<lex.c> ^ $fabpaths)-
