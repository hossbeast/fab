/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.
   
   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

$VERSIONL       = [ 0 6 0 0 ]                     # version list - major, minor, revision, build
$VERSIONS       = [ v [ $VERSIONL ~ j/. ] ~ j ]   # version string
$VERSIONN       = [ $VERSIONL ~ j s/^0//g ]       # version number

#
# debug :
#  - disable compiler optimizations
#  - enable compiler debug symbol generation
#  - include additional logging categories and cmdline options related to logging
#   - the --backtrace* options
#   - the --logtrace* options
#   - the *TOKEN and *STATE logging catories
#   - SANITY logging categories and related options
#  - disable ug+s check (to facilitate execution under valgrind)
#
#$debug         = [ 0 ]

#
# devel : (debug + portable)
#  - enable compilation options to use files from the source directories, including :
#   - listwise operators
#   - fab-listwise operators
#   - fab-provided invocations
#   - all libraries, via rpath
#
#$devel         = [ 0 ]

# source directories
$droot          = [ $* ]
$dfabcore       = [ $*/fab ~ j ]
$dfab           = [ $*/fab/fab ~ j ]
$dfabd          = [ $*/fab/fabd ~ j ]
$dfabw          = [ $*/fab/fabw ~ j ]
$dlibfabcore    = [ $*/fab/libfabcore ~ j ]
$dutil          = [ $*/fab/util ~ j ] 
$dcommon        = [ $*/common ~ j ]
$dlibxapi       = [ $*/libxapi ~ j ]
$dlibxlinux     = [ $*/libxlinux ~ j ]
$dlibvalyria    = [ $*/libvalyria ~ j ]
$dlibvalue      = [ $*/libvalue ~ j ]
$dliblorien     = [ $*/liblorien ~ j ]
$dlibyyutil     = [ $*/libyyutil ~ j ]
$dlibnarrator   = [ $*/libnarrator ~ j ]
$dliblistwise   = [ $*/listwise/liblistwise ~ j ]
$dlistwise      = [ $*/listwise/listwise ~ j ]
$dlibxunit      = [ $*/xunit/libxunit ~ j ]
$dxunit         = [ $*/xunit/xunit ~ j ]
$dliblogger     = [ $*/liblogger ~ j ]

# build artifacts
$libxapi_xapi_final     = [ $dlibxapi/libxapi-xapi.final.so ~ j ]
$libxapi_xapi_debug     = [ $dlibxapi/libxapi-xapi.debug.so ~ j ]
$libxapi_xapi_devel     = [ $dlibxapi/libxapi-xapi-devel.so ~ j ]
$libxlinux_eapi_final   = [ $dlibxlinux/libxlinux.final.so ~ j ]
$libxlinux_eapi_debug   = [ $dlibxlinux/libxlinux.debug.so ~ j ]
$libxlinux_eapi_devel   = [ $dlibxlinux/libxlinux-devel.so ~ j ]
$libxlinux_xapi_final   = [ $dlibxlinux/libxlinux-xapi.final.so ~ j ]
$libxlinux_xapi_debug   = [ $dlibxlinux/libxlinux-xapi.debug.so ~ j ]
$libxlinux_xapi_devel   = [ $dlibxlinux/libxlinux-xapi-devel.so ~ j ]
$liblistwise_eapi_final = [ $dliblistwise/liblistwise.final.so ~ j ]
$liblistwise_eapi_debug = [ $dliblistwise/liblistwise.debug.so ~ j ]
$liblistwise_eapi_devel = [ $dliblistwise/liblistwise-devel.so ~ j ]
$liblistwise_xapi_final = [ $dliblistwise/liblistwise-xapi.final.so ~ j ]
$liblistwise_xapi_debug = [ $dliblistwise/liblistwise-xapi.debug.so ~ j ]
$liblistwise_xapi_devel = [ $dliblistwise/liblistwise-xapi-devel.so ~ j ]
$listwise_eapi_final    = [ $dlistwise/listwise.eapi.final ~ j ]
$listwise_eapi_debug    = [ $dlistwise/listwise.eapi.debug ~ j ]
$listwise_eapi_devel    = [ $dlistwise/listwise.eapi.devel ~ j ]
$listwise_xapi_final    = [ $dlistwise/listwise.xapi.final ~ j ]
$listwise_xapi_debug    = [ $dlistwise/listwise.xapi.debug ~ j ]
$listwise_xapi_devel    = [ $dlistwise/listwise.xapi.devel ~ j ]
$libvalyria_eapi_final  = [ $dlibvalyria/libvalyria.final.so ~ j ]
$libvalyria_eapi_debug  = [ $dlibvalyria/libvalyria.debug.so ~ j ]
$libvalyria_eapi_devel  = [ $dlibvalyria/libvalyria-devel.so ~ j ]
$libvalyria_xapi_final  = [ $dlibvalyria/libvalyria-xapi.final.so ~ j ]
$libvalyria_xapi_debug  = [ $dlibvalyria/libvalyria-xapi.debug.so ~ j ]
$libvalyria_xapi_devel  = [ $dlibvalyria/libvalyria-xapi-devel.so ~ j ]
$libvalue_eapi_final    = [ $dlibvalue/libvalue.final.so ~ j ]
$libvalue_eapi_debug    = [ $dlibvalue/libvalue.debug.so ~ j ]
$libvalue_eapi_devel    = [ $dlibvalue/libvalue-devel.so ~ j ]
$libvalue_xapi_final    = [ $dlibvalue/libvalue-xapi.final.so ~ j ]
$libvalue_xapi_debug    = [ $dlibvalue/libvalue-xapi.debug.so ~ j ]
$libvalue_xapi_devel    = [ $dlibvalue/libvalue-xapi-devel.so ~ j ]
$liblorien_eapi_final   = [ $dliblorien/liblorien.final.so ~ j ]
$liblorien_eapi_debug   = [ $dliblorien/liblorien.debug.so ~ j ]
$liblorien_eapi_devel   = [ $dliblorien/liblorien-devel.so ~ j ]
$liblorien_xapi_final   = [ $dliblorien/liblorien-xapi.final.so ~ j ]
$liblorien_xapi_debug   = [ $dliblorien/liblorien-xapi.debug.so ~ j ]
$liblorien_xapi_devel   = [ $dliblorien/liblorien-xapi-devel.so ~ j ]
$libyyutil_eapi_final   = [ $dlibyyutil/libyyutil.final.so ~ j ]
$libyyutil_eapi_debug   = [ $dlibyyutil/libyyutil.debug.so ~ j ]
$libyyutil_eapi_devel   = [ $dlibyyutil/libyyutil-devel.so ~ j ]
$libyyutil_xapi_final   = [ $dlibyyutil/libyyutil-xapi.final.so ~ j ]
$libyyutil_xapi_debug   = [ $dlibyyutil/libyyutil-xapi.debug.so ~ j ]
$libyyutil_xapi_devel   = [ $dlibyyutil/libyyutil-xapi-devel.so ~ j ]
$libnarrator_eapi_final = [ $dlibnarrator/libnarrator.final.so ~ j ]
$libnarrator_eapi_debug = [ $dlibnarrator/libnarrator.debug.so ~ j ]
$libnarrator_eapi_devel = [ $dlibnarrator/libnarrator-devel.so ~ j ]
$libnarrator_xapi_final = [ $dlibnarrator/libnarrator-xapi.final.so ~ j ]
$libnarrator_xapi_debug = [ $dlibnarrator/libnarrator-xapi.debug.so ~ j ]
$libnarrator_xapi_devel = [ $dlibnarrator/libnarrator-xapi-devel.so ~ j ]
$libxunit_xapi_final    = [ $dlibxunit/libxunit-xapi.final.so ~ j ]
$libxunit_xapi_debug    = [ $dlibxunit/libxunit-xapi.debug.so ~ j ]
$libxunit_xapi_devel    = [ $dlibxunit/libxunit-xapi-devel.so ~ j ]
$liblogger_eapi_final   = [ $dliblogger/liblogger.final.so ~ j ]
$liblogger_eapi_debug   = [ $dliblogger/liblogger.debug.so ~ j ]
$liblogger_eapi_devel   = [ $dliblogger/liblogger-devel.so ~ j ]
$liblogger_xapi_final   = [ $dliblogger/liblogger-xapi.final.so ~ j ]
$liblogger_xapi_debug   = [ $dliblogger/liblogger-xapi.debug.so ~ j ]
$liblogger_xapi_devel   = [ $dliblogger/liblogger-xapi-devel.so ~ j ]
$fab_final              = [ $dfab/fab.final ~ j ]
$fab_debug              = [ $dfab/fab.debug ~ j ]
$fab_devel              = [ $dfab/fab.devel ~ j ]
$fabd_final             = [ $dfabd/fabd.final ~ j ]
$fabd_debug             = [ $dfabd/fabd.debug ~ j ]
$fabd_devel             = [ $dfabd/fabd.devel ~ j ]
$fabw_final             = [ $dfabw/fabw.final ~ j ]
$fabw_debug             = [ $dfabw/fabw.debug ~ j ]
$fabw_devel             = [ $dfabw/fabw.devel ~ j ]
$libfabcore_xapi_final  = [ $dlibfabcore/libfabcore-xapi.final.so ~ j ]
$libfabcore_xapi_debug  = [ $dlibfabcore/libfabcore-xapi.debug.so ~ j ]
$libfabcore_xapi_devel  = [ $dlibfabcore/libfabcore-xapi-devel.so ~ j ]
$xunit_xapi_final       = [ $dxunit/xunit.final ~ j ]
$xunit_xapi_debug       = [ $dxunit/xunit.debug ~ j ]
$xunit_xapi_devel       = [ $dxunit/xunit.devel ~ j ]
$xunit_valgrind_runner  = [ $*/xunit/valgrind.runner ~ j ]
$xunit_tests            = [ $*/test/xunit.fab ~ j ]
$gccdep_final           = [ $dutil/gcc-dep ~ j ]
$gccdep_debug           = [ $dutil/gcc-dep ~ j ]
$gccdep_devel           = [ $dutil/gcc-dep ~ j ]

# install directories (these are suitable for ubuntu-64)
$destdir        = [ ]                             # root install directory - does not affect runtime directories
$incdir         = [ /usr/include ]                # header files
$bindir         = [ /usr/local/bin ]              # executables
$libdir         = [ /usr/lib/x86_64-linux-gnu ]   # dynamically linked libraries
$mandir         = [ /usr/share/man ]              # man files

#
# configurable runtime directories
#  (that may be set at build-time)
#

# install-time values
$buildroot              = [ $* ~ can ]
$dlibdir                = [ /usr/lib ]                    # dloaded libraries
$fabtmpdir              = [ /var/tmp/fab ]                # fab tmp
$fabtmpdir_devel        = [ /tmp/$fabtmpdir ~ j can ]     # fab tmp
$fabipcdir              = [ /var/run/fab ]
$fabipcdir_devel        = [ /tmp/$fabipcdir ~ j can ]     # fab shm/ipc files
$lwopdir                = [ $dlibdir/listwise ~ j can ]
$lwopdir_devel          = [ $dliblistwise/op ~ j can ]
$lwopext                = [ so ]
$fablwopdir             = [ $dlibdir/fab/listwise ~ j can ]
$fablwopdir_devel       = [ $dfabcore/fablw/op ~ j can ]
$fabinvokedir           = [ $dlibdir/fab/fablib ~ j can ]
$fabinvokedir_devel     = [ $dfabcore/fablib ~ j can ]

# compilers and their flags
$flex       = [ flex ]
$flexflags  = [ ]

$bison      = [ bison ]
$bisonflags = [ --warnings=error ]

$cc         = [ gcc ]

# cflags options
$cflags       = [
  # universal compiler options
  [ -m64 -Wall -Werror -D_GNU_SOURCE -fplan9-extensions -fno-builtin-log ]

  # include paths
  [ $dcommon ~ lsr c -d s/^/-I ]

  # buildstamp
  [ -DBUILDSTAMP='[ $^starttime ~ datef ]' ~ j ]
]

# cflags options
$cflags_final = [ -O3 ]
$cflags_debug = [ -O0 -ggdb3 -DDEBUG ]
$cflags_devel = [ -O0 -ggdb3 -DDEVEL -DSANITY [ -DBUILDROOT="\""$buildroot"\"" ~ j ] -DDEBUG_IPC ]
$cflags_xunit = [ -O0 -ggdb3 -DXUNIT [ $dlibxunit ~ s/^/-I ] ]

# cflags variants
$cflags_eapi_final = [ $cflags -DXAPI_MODE_ERRORCODE $cflags_final ]
$cflags_eapi_debug = [ $cflags -DXAPI_MODE_ERRORCODE $cflags_debug ]
$cflags_eapi_devel = [ $cflags -DXAPI_MODE_ERRORCODE $cflags_devel ]
$cflags_xapi_final = [ $cflags -DXAPI_MODE_STACKTRACE $cflags_final ]
$cflags_xapi_debug = [ $cflags -DXAPI_MODE_STACKTRACE $cflags_debug ]

# test code MUST be compiled with STACKTRACE_CHECKS, to match xunit itself
$cflags_xapi_devel = [ $cflags -DXAPI_MODE_STACKTRACE_CHECKS $cflags_devel ]
$cflags_xapi_xunit = [ $cflags -DXAPI_MODE_STACKTRACE_CHECKS $cflags_xunit ]
