/* Copyright (c) 2012-2015 Todd Freed <todd.freed@gmail.com>

   This file is part of fab.

   fab is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   fab is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with fab.  If not, see <http://www.gnu.org/licenses/>. */

# c.fab
#  provides fabrication formula for .tab.c -> { .tokens.c, .tokens.h }
#  provides dependencies for { .tokens.c, .tokens.h } -> .tab.c
#
# var/closure
#
#  dirs       - directories containing .tab.c files
#  rdirs      - directories containing .tab.c files, recursive search
#  paths      - paths to .tab.c files
#
#  fabdirs    - (as above, but for fabrication/dependency only)
#  rfabdirs   -
#  fabpaths   -

+[ $*/../../../vars.fab ]

# paths to y files for fabrication
$tabcfabpaths = [
	$paths				# paths
	$fabpaths			# paths, fabrication only

	[
		$dirs				# directories
		$fabdirs		# directories, fabrication only
	~ ls ]

	[
		$rdirs			# recursive directories
		$rfabdirs		# recursive directories, fabrication only
	~ lsr ]
~ lx/y ]

# tab.c -> { .tokens.c, .tokens.h }
[ $tabcfabpaths ~ sx/y/tokens.c sy uu v d cp u sx/tokens.c/tokens.h z dj/2 shift pop ] :: [ $< ~ rx sx/tokens.c/tab.c sx/tokens.h/tab.c ss u ]
{
	src=[ $@ ~ rx/ineed uu ]
	tokens_h=[ $@ ~ w/0/1 ]
	tokens_c=[ $@ ~ w/1/1 ]
	pfx=[ $@ ~ w/0/1 rx bn fn ]

	> exec 1>${tokens_h}
	> echo "#ifndef ${pfx}_TOKENS_H"
	> echo "#define ${pfx}_TOKENS_H"
  > echo "#include <stdint.h>"
	> echo "extern uint16_t ${pfx}_numtokens;"
	> echo "extern uint16_t ${pfx}_mintoken;"
	> echo "extern uint16_t ${pfx}_maxtoken;"
	> echo "extern uint16_t * ${pfx}_tokenindexes;"
	> echo "extern uint16_t * ${pfx}_tokennumbers;"
	> echo "extern const char ** ${pfx}_tokennames;"
	> echo "extern const char ** ${pfx}_tokenstrings;"
	> echo "extern const uint16_t * ${pfx}_tokenstring_tokens;"
	> echo "enum ${pfx}_tokens {"
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne "s/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/${pfx}_\1 = \2,/p"
	> echo "};"
	> echo -n "#define ${pfx}_MINTOKEN "
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2/p' \
	>  | sort -n \
	>  | head -n 1
	> echo -n "#define ${pfx}_MAXTOKEN "
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2/p' \
	>  | sort -nr \
	>  | head -n 1
  > echo
	> echo "#endif"

	> exec 1>${tokens_c}
	> echo "#define YY_NULL 0"
	> echo "#define YY_NULLPTR 0"
  > echo "#include <stdint.h>"
	> echo -n "#define ${pfx}_MINTOKEN "
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2/p' \
	>  | sort -n \
	>  | head -n 1
	> echo -n "#define ${pfx}_MAXTOKEN "
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2/p' \
	>  | sort -nr \
	>  | head -n 1
	> echo "uint16_t ${pfx}_mintoken = ${pfx}_MINTOKEN;"
	> echo "uint16_t ${pfx}_maxtoken = ${pfx}_MAXTOKEN;"
	> echo "const uint16_t * ${pfx}_tokenindexes = (uint16_t[]) {"
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
  > | perl -ne '/[A-Z0-9]+ = ([0-9]+)/ and print "[$1 - '${pfx}'_MINTOKEN] = " . $x++ . ",\n"'
	> echo "};"
	> echo "const char ** ${pfx}_tokennames = (const char *[]) {"
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
  >  | sed -ne "s/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\"\1\",/p"
	> echo "};"
  > echo "const char ** ${pfx}_tokenstrings = (const char *[]) {"
  > sed -ne '/static const char .const yytname/,/};/ p' < ${src} \
  >  | sed -ne '3,$p'
  > echo "const uint16_t * ${pfx}_tokenstring_tokens = (uint16_t []) {"
  > sed -ne '/static const yytype_int16 yytoknum/,/};/ p' < ${src} \
  >  | sed -ne '3,$p'
	> echo "uint16_t * ${pfx}_tokennumbers = (uint16_t []) {"
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2,/p'
	> echo "};"
	> echo "uint16_t ${pfx}_numtokens = sizeof((uint16_t []) {"
	> sed -ne '/enum[ \t]\+[a-z_]\+yytokentype/,/};/ p' < ${src} \
	>  | sed -ne 's/\([^ \t]\+\)[ \t]\+=[ \t]\+\([^ \t,]\+\),\?/\2,/p'
	> echo "}) / sizeof(uint16_t);"
}

# cc : tokens.c -> tokens.o @ std.c
+[@std.c](-$cobjpaths; $cfabpaths = [ $tabcfabpaths ~ sx/y/tokens.c ]; $cdscpaths = [ ]; $cc $cflags)
$tabcobjpaths = [ $cobjpaths ]
