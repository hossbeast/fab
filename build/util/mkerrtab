#!/usr/bin/env perl

# Copyright (c) 2012-2018 Todd Freed <todd.freed@gmail.com>
#
# This file is part of fab.
#
# fab is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fab.  If not, see <http://www.gnu.org/licenses/>. */

use strict;
use warnings;

$SIG{__WARN__} = sub { die @_ };
$SIG{__DIE__} = sub {
  die @_ if $^S;
  die @_ unless $_[0] =~ /(.*) at .* line.*$/m;
  die "$1\n"
};

use Digest::MD5;
use File::Basename;

use Data::Dumper;

sub usage
{
  die "mkerrtab: path-to-errtab";
}

my $errtab = $ARGV[0] or usage();
my ($name, $directories, $suffix) = fileparse($errtab, ".errtab");
$suffix or usage();

# unique 2 byte integer
my $tag = sprintf("0x%04x", unpack("n", Digest::MD5::md5($name)));

my @err;
my $min = 0xffffffff;
my $max = 0;
my $path = $errtab;
open FH, $path or die "open($path) : $!";
while(<FH>)
{
  if(/^([-0-9]+)[\t ]+([^\t ]+)(?:[\t ]+(.*))?/)
  {
    push @err, [ $1, $2, $3 ];
    $min = $1 if $1 < $min;
    $max = $1 if $1 > $max;
  }
}
close FH;

# generated header file
$path = "$directories/$name.errtab.h";
open FH, ">$path" or die "open($path) : $!";
print FH <<"END";
/* An errtab header file generated by fab. fab is free software released under the
   GNU General Public License.

   As a special exception, errtab header files generated by fab (including this
   errtab header file) are excluded from the license covering fab itself, even if
   substantial portions of the fab source code are copied verbatim into the errtab
   header file. You may create a larger work that contains part or all of the build
   script and distribute that work under terms of your choice. */

#ifndef ${name}_ERRTAB_H
#define ${name}_ERRTAB_H

#include "xapi.h"

#define ERRTAG_${name} $tag
#define ERRMIN_${name} $min
#define ERRMAX_${name} $max
#define ETABLE_${name} \\
END

for(@err)
{
  print FH "_ERRDEF($$_[0], $$_[1], \"$$_[2]\") \\\n";
}

print FH <<"END";

enum {
#define _ERRDEF(a, b, c) ${name}_ ## b = (ERRTAG_${name} << 16) | a,
ETABLE_${name}
#undef _ERRDEF
};

extern errtab * perrtab_${name};
#endif
END
close FH;

# generated c file
$path = "$directories/$name.errtab.c";
open FH, ">$path" or die "open($path) : $!";
print FH <<"END";
/* An errtab definition file generated by fab. fab is free software released under the
   GNU General Public License.

   As a special exception, errtab definition files generated by fab (including this
   errtab definition file) are excluded from the license covering fab itself, even if
   substantial portions of the fab source code are copied verbatim into the errtab
   definition file. You may create a larger work that contains part or all of the build
   script and distribute that work under terms of your choice. */

#include "${name}.errtab.h"

errtab errtab_${name} = {
    .name = "${name}"
  , .tag = ERRTAG_${name}
  , .min = ERRMIN_${name}
  , .max = ERRMAX_${name}
  , .v =  (typeof(((errtab*)0)->v[0])[]) {
#define _ERRDEF(a, b, c) [ a - ERRMIN_${name} ] = { .name = #b, .desc = c, .str = "${name}_" #b " : " c, .exit = (ERRTAG_${name} << 16) | a },
ETABLE_${name}
#undef _ERRDEF
    }
};

#define APIDATA
errtab * APIDATA perrtab_${name} = &errtab_${name};

#if XAPI_STACKTRACE
#include "xapi/errtab.h"
static void __attribute__((constructor)) init() {
  xapi_errtab_stage(perrtab_${name});
}
static void __attribute__((destructor)) fini() {
  xapi_errtab_unstage(perrtab_${name});
}
#endif
END
close FH;
