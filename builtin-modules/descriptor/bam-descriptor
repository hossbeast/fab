#!/usr/bin/env perl

# Copyright (c) 2012-2018 Todd Freed <todd.freed@gmail.com>
#
# This file is part of fab.
#
# fab is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fab.  If not, see <http://www.gnu.org/licenses/>. */

use strict;
use warnings;
$SIG{__WARN__} = sub { die @_ };
$SIG{__DIE__} = sub {
  die @_ if $^S;
  die @_ unless $_[0] =~ /(.*) at .* line.*$/m;
  die "$1\n"
};

use Digest::MD5;
use File::Basename;
use Data::Dumper;
use Fcntl qw|SEEK_SET|;

my $desc   = substr($ENV{bm_source0}, -5) eq ".desc" ? $ENV{bm_source0} : $ENV{bm_source1};
my $src_h  = substr($ENV{bm_source0}, -2) eq ".h" ? $ENV{bm_source0} : $ENV{bm_source1};
my $desc_c = substr($ENV{bm_target0}, -2) eq ".c" ? $ENV{bm_target0} : $ENV{bm_target1};
my $desc_h = substr($ENV{bm_target0}, -2) eq ".h" ? $ENV{bm_target0} : $ENV{bm_target1};
my ($name, $directories, $suffix) = fileparse($desc, ".desc");
$suffix or die("invalid : $desc");

my %field_types = (
    'uint8_t'   => { code => 1 }
  , 'uint16_t'  => { code => 2 }
  , 'uint32_t'  => { code => 3 }
  , 'uint64_t'  => { code => 4 }
  , 'pid_t'     => { code => 3 }
  , 'int'       => { code => 3 }
  , 'char*'     => { code => 5 }
  , 'char**'    => { code => 6 }
);

# search for type_descriptor declarations
my $path = $src_h;
my %descriptors;
open FH, $path or die "open($path) : $!";
while(<FH>)
{
  if(/^extern type_descriptor ([a-zA-Z_]+)_descriptor;$/)
  {
    $descriptors{$1} = [];
  }
}

# regex to find the structs
my $type_pat = 'struct (';
for my $name (keys %descriptors)
{
  $type_pat .= '|' if length($type_pat) > 8;
  $type_pat .= '(?:';
  for my $c (split(//, $name))
  {
    $type_pat .= "[$c]";
  }
  $type_pat .= ')';
}
$type_pat .= ')';
$type_pat = qr/$type_pat/;

my $type = undef;
seek FH, 0, SEEK_SET or die $!;
while(<FH>)
{
  if(!$type)
  {
    if(/$type_pat/)
    {
      $type = $1;
    }
  }
  # insignificant lines
  elsif(index($_, ";") == -1) { }

  # fields
  elsif(/^\s*([a-zA-Z0-9_ \*]+(?: |\*))([a-zA-Z0-9_]+);/)
  {
    my $info = "$1";
    my $name = "$2";
    $info =~ s/const//g;
    $info =~ s/ //g;

    die "cannot interpret $info : $_" unless exists $field_types{$info};
    my $field_type = $field_types{$info};

    push @{$descriptors{$type}}, { type => $field_type, name => $name };
  }

  # end-of-definition
  elsif(/^\s*}[a-zA-Z0-9_ ]+;/)
  {
    $type = undef;
  }
  else
  {
    die "cannot interpret : $_";
  }
}
close FH;

while(my($name, $v) = each %descriptors)
{
  die "type $name not found" unless scalar(@$v) > 0;
}

# generated header file
$path = "$directories/$name.desc.h";
open FH, ">$path" or die "open($path) : $!";
print FH <<"END";
/* A desc header file generated by fab. fab is free software released under the
   GNU General Public License.

   As a special exception, desc header files generated by fab (including this
   desc header file) are excluded from the license covering fab itself, even if
   substantial portions of the fab source code are copied verbatim into the desc
   header file. You may create a larger work that contains part or all of the build
   script and distribute that work under terms of your choice. */

#ifndef ${name}_DESC_H
#define ${name}_DESC_H

#include "descriptor.h"

extern struct type_descriptor ${name}_descriptor;

#endif
END
close FH;

# generated c file
$path = "$directories/$name.desc.c";
open FH, ">$path" or die "open($path) : $!";
print FH <<"END";
/* A desc definition file generated by fab. fab is free software released under the
   GNU General Public License.

   As a special exception, desc definition files generated by fab (including this
   desc definition file) are excluded from the license covering fab itself, even if
   substantial portions of the fab source code are copied verbatim into the desc
   definition file. You may create a larger work that contains part or all of the build
   script and distribute that work under terms of your choice. */

#include "descriptor.h"
#include "${name}.desc.h"
#include "$src_h"
#include "macros.h"

END

while(my($name, $def) = each %descriptors)
{
  print FH <<"END";
struct type_descriptor ${name}_descriptor = {
  members : (field_descriptor[]) {
END

  my $id = 1;
  for my $field (@$def)
  {
    print FH "    { id : $id, offset : offsetof($name, $$field{name}), size : sizeof($name, $$field{name}), code : $$field{type}{code} },\n";
    $id++;
  }
}

print FH <<"END";
  }
};

END
close FH;
